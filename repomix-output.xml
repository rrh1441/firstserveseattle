This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.cursor/
  rules/
    posthog-integration.mdc
.github/
  workflows/
    mail-missing-cards.yml
public/
  file.svg
  globe.svg
  next.svg
  sw-kill.js
  vercel.svg
  window.svg
scripts/
  backfillStripeIds.ts
  generate-qr.js
  mailMissingCards.ts
sql/
  paywall_conversion.sql
src/
  app/
    admin/
      layout.tsx
      page.tsx
    api/
      admin/
        analytics/
          route.ts
      check-paywall/
        route.ts
      checkout-session/
        route.ts
      create-checkout-session/
        route.ts
      create-portal-link/
        route.ts
      create-subscriber/
        route.ts
      log-event/
        route.ts
      member-status/
        route.ts
      sitemap/
        route.ts
      stripe-webhook/
        route.ts
      update-and-check-session/
        route.ts
    auth/
      callback/
        route.ts
    billing/
      page.tsx
    check-membership/
      page.tsx
    checkout-success/
      page.tsx
    components/
      ui/
        badge.tsx
        button.tsx
        card.tsx
        dialog.tsx
        separator.tsx
        tabs.tsx
        toggle-group.tsx
        toggle.tsx
      AuthWrapper.tsx
      LandingPage.tsx
      MaintenanceModal.tsx
      PlanSelector.tsx
      SocialAuthButtons.tsx
    contact/
      page.tsx
    courts/
      [slug]/
        page.tsx
      layout.tsx
      page.tsx
    faq/
      page.tsx
    login/
      LoginFormClient.tsx
      page.tsx
    members/
      page.tsx
    paywall/
      page.tsx
    privacy-policy/
      page.tsx
    q/
      [slug]/
        page.tsx
    request-password-reset/
      page.tsx
    reset-password/
      page.tsx
    signup/
      layout.tsx
      page.tsx
    tennis-courts/
      components/
        AboutUs.tsx
        counter.tsx
        DaysCounter.tsx
        paywall.tsx
        TennisCourtList.tsx
    terms-of-service/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
    randomUserSetup.ts
  components/
    facility/
      FacilityCard.tsx
      FacilityGrid.tsx
    AnalyticsDashboard.tsx
    ClientIdsInit.tsx
    ClientStorageInit.tsx
    PostHogProvider.tsx
    SiteFooter.tsx
  lib/
    createBillingPortal.ts
    eventLogging.ts
    getTennisCourts.ts
    initClientIds.ts
    initLocalStorage.ts
    logEvent.ts
    neighborhoodMapping.ts
    offerExperiments.ts
    paywallCopy.ts
    posthog.ts
    shouldShowPaywall.ts
    supabaseClient.ts
    updateUserSessions.ts
    useGateDays.ts 
    usePaywallAnalytics.ts
    utils.ts
  types/
    global.d.ts
supabase/
  functions/
    send-recover-email/
      index.ts
ui/
  package.json
  postcss.config.js
  tailwind.config.js
.gitignore
eslint.config.mjs
next.config.ts
package.json
pnpm-workspace.yaml
postcss.config.mjs
qr_manifest.csv
README.md
tailwind.config.ts
tsconfig.json
vercel.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(npm run build:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(stripe:*)",
      "Bash(--id=\"fifty_percent_first_month\" )",
      "Bash(--name=\"50% Off First Month\" )",
      "Bash(--percent-off=50 )",
      "Bash(--duration=once )",
      "Bash(--max-redemptions=10000)",
      "Bash(--id=\"fifty_percent_first_month\" )",
      "Bash(--name=\"50% Off First Month\" )",
      "Bash(--duration=\"once\" )",
      "Bash(-d \"percent_off=50\")",
      "Bash(cut:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(npm run dev:*)",
      "mcp__ide__getDiagnostics",
      "Bash(curl:*)"
    ],
    "deny": []
  }
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/sw-kill.js">
// public/sw-kill.js
// This file is intentionally empty or minimal.
// Its purpose is just to exist so it can be registered and then unregistered
// by the <Script id="sw-kill" strategy="beforeInteractive"> in layout.tsx.
// It helps ensure all service workers are fully removed.
self.addEventListener('install', () => { self.skipWaiting(); });
self.addEventListener('activate', () => { self.clients.claim(); });
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="scripts/generate-qr.js">
/* eslint-disable no-console ---------------------------------------------- */
/*  0. ENV ­──────────────────────────────────────────────────────────────── */
require("dotenv").config();

/*  1. DOM & canvas polyfill (qr-code-styling-node, Node ≥20) ­──────────── */
const { JSDOM } = require("jsdom");
const {
  Canvas, createCanvas,
  CanvasRenderingContext2D, Image, ImageData
} = require("@napi-rs/canvas");

const dom = new JSDOM("<!doctype html><html><body></body></html>");
global.window   = dom.window;
global.document = dom.window.document;
global.self     = global;
dom.window.navigator = { userAgent: "node.js" };

global.HTMLCanvasElement = class extends Canvas {
  constructor(w = 300, h = 150) { return createCanvas(w, h); }
};
const orig = dom.window.document.createElement.bind(dom.window.document);
dom.window.document.createElement = (t) =>
  t.toLowerCase() === "canvas" ? createCanvas(300, 150) : orig(t);

global.CanvasRenderingContext2D = CanvasRenderingContext2D;
global.Image     = Image;
global.ImageData = ImageData;

/*  2. Libs ­────────────────────────────────────────────────────────────── */
const QRCodeStyling     = require("qr-code-styling-node");
const sharp             = require("sharp");
const path              = require("node:path");
const fs                = require("node:fs/promises");
const { createClient }  = require("@supabase/supabase-js");
const { parse: json2csv } = require("json2csv");

/*  3. Geometry & paths ­────────────────────────────────────────────────── */
const FINAL = 800;        /* finished PNG */
const QR    = 560;        /* real square QR (fits with quiet-zone) */
const MARGIN = (FINAL - QR) / 2;   /* 120 px on all sides */
const OUT_DIR = path.resolve("public/qr");
const CSV     = "qr_manifest.csv";

/*  4. Colours (fallbacks; DB overrides) ­───────────────────────────────── */
const DEF_BG = "#9eaf81";   /* light fill */
const DEF_FG = "#1f1f1f";   /* dark modules / ring */

/*  5. Supabase ­────────────────────────────────────────────────────────── */
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/*  6. SVG helpers ­─────────────────────────────────────────────────────── */
const svgCircle = (fill, stroke, w = 4) =>
  Buffer.from(`<svg width="${FINAL}" height="${FINAL}">
    <circle cx="${FINAL / 2}" cy="${FINAL / 2}" r="${FINAL / 2 - w / 2}"
            ${fill   ? `fill="${fill}"`   : 'fill="none"'}
            ${stroke ? `stroke="${stroke}" stroke-width="${w}"` : ""}/>
  </svg>`);

/*  7. Decorative dots layer (annulus only) ­────────────────────────────── */
function makeDecorativeDots(col) {
  const DOT_R   = 5;                 // px
  const STEP    = 14;                // dot grid spacing
  const INNER   = MARGIN - 2;        // start just outside QR quiet-zone
  const R2_MAX  = (FINAL / 2 - DOT_R) ** 2;

  let circles = "";
  for (let y = DOT_R; y < FINAL; y += STEP) {
    for (let x = DOT_R; x < FINAL; x += STEP) {
      /* inside outer circle? */
      const dx = x - FINAL / 2, dy = y - FINAL / 2;
      if (dx * dx + dy * dy > R2_MAX) continue;

      /* outside expanded square? */
      if (
        x >= INNER && x <= FINAL - INNER &&
        y >= INNER && y <= FINAL - INNER
      ) continue;  // belongs to QR zone, skip

      /* random sparsening to avoid perfect grid look */
      if (Math.random() < 0.45) continue;

      circles += `<circle cx="${x}" cy="${y}" r="${DOT_R}" />`;
    }
  }
  return Buffer.from(`<svg xmlns="http://www.w3.org/2000/svg"
         width="${FINAL}" height="${FINAL}" fill="${col}">${circles}</svg>`);
}

/*  8. Build ­────────────────────────────────────────────────────────────── */
(async () => {
  await fs.mkdir(OUT_DIR, { recursive: true });

  const { data: rows, error } = await supabase
    .from("tennis_facilities")
    .select("slug, qr_bg_hex, qr_fg_hex, court_count")
    .order("slug");
  if (error) throw error;
  if (!rows.length) throw new Error("no facilities returned");

  const manifest = [];

  for (const row of rows) {
    const bg = row.qr_bg_hex || DEF_BG;
    const fg = row.qr_fg_hex || DEF_FG;
    const url = `https://firstserveseattle.com/q/${row.slug}`;

    /* 8.1  generate square QR (transparent background) */
    const qr = new QRCodeStyling({
      width: QR,
      height: QR,
      data: url,
      qrOptions: { errorCorrectionLevel: "H", margin: 4 },
      dotsOptions: { color: fg, type: "dots" },
      backgroundOptions: { color: "transparent" }
    });
    const qrBuf = await qr.getRawData("png");

    /* 8.2  compose: filled circle, QR, decorative dots, outline */
    const final = await sharp({
      create: {
        width: FINAL,
        height: FINAL,
        channels: 4,
        background: { r: 0, g: 0, b: 0, alpha: 0 }
      }
    })
      .composite([
        { input: svgCircle(bg) },
        { input: qrBuf, top: MARGIN, left: MARGIN },
        { input: makeDecorativeDots(fg) },
        { input: svgCircle("none", fg, 4) }
      ])
      .png()
      .toBuffer();

    const file = `${row.slug}.png`;
    await fs.writeFile(path.join(OUT_DIR, file), final);
    console.log("✓", file);

    manifest.push({
      slug: row.slug,
      file,
      copies: row.court_count ?? 0
    });
  }

  await fs.writeFile(
    CSV,
    json2csv(manifest, { fields: ["slug", "file", "copies"] }),
    "utf8"
  );
  console.log("→", CSV, "written");
})();
</file>

<file path="sql/paywall_conversion.sql">
-- Sample dataset for paywall conversion metrics
CREATE TEMP TABLE paywall_view(
    user_id integer,
    ab_group text
);

CREATE TEMP TABLE paywall_cta_click(
    user_id integer
);

CREATE TEMP TABLE trial_started(
    user_id integer
);

CREATE TEMP TABLE plan_activated(
    user_id integer
);

-- populate sample data
INSERT INTO paywall_view(user_id, ab_group) VALUES
    (1, 'A'),
    (2, 'A'),
    (3, 'B'),
    (4, 'B'),
    (5, 'B');

INSERT INTO paywall_cta_click(user_id) VALUES
    (1),
    (3),
    (4);

INSERT INTO trial_started(user_id) VALUES
    (1),
    (3);

INSERT INTO plan_activated(user_id) VALUES
    (1);

-- CTE calculating conversion metrics per ab_group
WITH views AS (
    SELECT ab_group, COUNT(DISTINCT user_id) AS view_count
    FROM paywall_view
    GROUP BY ab_group
),
cta AS (
    SELECT pv.ab_group, COUNT(DISTINCT c.user_id) AS click_count
    FROM paywall_view pv
    JOIN paywall_cta_click c ON c.user_id = pv.user_id
    GROUP BY pv.ab_group
),
trials AS (
    SELECT pv.ab_group, COUNT(DISTINCT t.user_id) AS trial_count
    FROM paywall_view pv
    JOIN trial_started t ON t.user_id = pv.user_id
    GROUP BY pv.ab_group
),
activations AS (
    SELECT pv.ab_group, COUNT(DISTINCT a.user_id) AS activation_count
    FROM paywall_view pv
    JOIN plan_activated a ON a.user_id = pv.user_id
    GROUP BY pv.ab_group
),
metrics AS (
    SELECT
        v.ab_group,
        v.view_count,
        COALESCE(c.click_count, 0) AS click_count,
        COALESCE(tr.trial_count, 0) AS trial_count,
        COALESCE(a.activation_count, 0) AS activation_count
    FROM views v
    LEFT JOIN cta c ON c.ab_group = v.ab_group
    LEFT JOIN trials tr ON tr.ab_group = v.ab_group
    LEFT JOIN activations a ON a.ab_group = v.ab_group
)
SELECT
    ab_group,
    view_count,
    click_count,
    trial_count,
    activation_count,
    ROUND(click_count::numeric / NULLIF(view_count, 0), 2)     AS click_rate,
    ROUND(trial_count::numeric / NULLIF(click_count, 0), 2)    AS trial_rate,
    ROUND(activation_count::numeric / NULLIF(trial_count, 0), 2) AS activation_rate
FROM metrics
ORDER BY ab_group;
</file>

<file path="src/app/api/check-paywall/route.ts">
import { supabase } from "@/lib/supabaseClient";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const userId = searchParams.get("userId");

  /* ---------- anonymous visitor → always allow & short-circuit ---------- */
  if (!userId) {
    return NextResponse.json(
      { showPaywall: false, uniqueDays: 0, gateDays: 0 },
      { status: 200 },
    );
  }

  /* ---------- signed-in path ------------------------------------------- */
  const { data, error } = await supabase
    .from("user_sessions")
    .select("unique_days")
    .eq("user_id", userId)
    .single();

  if (error && error.code !== "PGRST116") {
    // PGRST116: no rows found – treat like 0
    console.error("Supabase error in check-paywall:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  const uniqueDays = data?.unique_days ?? 0;
  const gateDays   = Number(request.headers.get("x-paywall-gate") ?? "5");

  return NextResponse.json(
    { showPaywall: uniqueDays >= gateDays, uniqueDays, gateDays },
    { status: 200 },
  );
}
</file>

<file path="src/app/api/log-event/route.ts">
// src/app/api/log-event/route.ts
import { supabase } from "@/lib/supabaseClient";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    // The payload structure should match what logEvent sends
    const { event, metadata, timestamp } = await req.json();

    // Add validation if necessary, though Supabase schema validation is often sufficient
    if (!event || !timestamp) {
      return NextResponse.json({ error: "Missing event or timestamp" }, { status: 400 });
    }

    const { error } = await supabase.from("event_logs").insert([
      {
        event,
        metadata: metadata || {}, // Ensure metadata is at least an empty object
        timestamp,
      },
    ]);

    if (error) {
      console.error("Supabase insert error:", error.message);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json({ status: "ok" });
  } catch (err) {
    console.error("API handler error:", err);
    return NextResponse.json({ error: "Failed to log event" }, { status: 500 });
  }
}
</file>

<file path="src/app/api/sitemap/route.ts">
// src/app/api/sitemap/route.ts
import { NextResponse } from 'next/server';

// Exporting a function makes this file a module
// This is a basic GET handler for the sitemap route
// Fix: Explicitly use '_request' parameter to satisfy linter
export async function GET(_request: Request) {
  // Placeholder: You'll need to add your actual sitemap generation logic here.
  // Log the request URL to ensure '_request' is used
  console.log(`Sitemap route accessed. Request URL: ${_request.url}`);

  // Example: Returning a simple XML structure (replace with actual sitemap)
  const sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://www.firstserveseattle.com/</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>https://www.firstserveseattle.com/login</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
   <url>
    <loc>https://www.firstserveseattle.com/signup</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <!-- Add other URLs here -->
</urlset>`;

  return new NextResponse(sitemapContent, {
    status: 200,
    headers: {
      'Content-Type': 'application/xml',
      // Optional: Cache control headers
      // 'Cache-Control': 's-maxage=86400, stale-while-revalidate', // Cache for 1 day
    },
  });
}

// You can add other HTTP method handlers if needed (POST, PUT, etc.)
// export async function POST(request: Request) { ... }
</file>

<file path="src/app/api/update-and-check-session/route.ts">
/* src/app/api/update-and-check-session/route.ts */
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  { auth: { autoRefreshToken: false, persistSession: false } },
);

const DEFAULT_GATE = 5;             // if header missing
const TODAY = new Date().toISOString().slice(0, 10); // YYYY-MM-DD

export async function POST(request: Request) {
  const { userId } =
    (await request.json().catch(() => ({}))) as { userId?: string };

  /* ---------- anonymous fallback ------------------------------------- */
  if (!userId)
    return NextResponse.json(
      { showPaywall: false, uniqueDays: 0 },
      { status: 200 },
    );

  /* ---------- read header from browser – cohort assignment ----------- */
  const gateHeader = request.headers.get("x-paywall-gate") ?? "";
  const gateDays = Number.isNaN(parseInt(gateHeader, 10)) || parseInt(gateHeader, 10) <= 0
    ? DEFAULT_GATE
    : parseInt(gateHeader, 10);

  try {
    const { data: row, error } = await supabase
      .from("user_sessions")
      .select("id, unique_days, last_view_date")
      .eq("user_id", userId)
      .maybeSingle();

    if (error) throw error;

    let uniqueDays = 1;

    if (row) {
      const newDay = row.last_view_date !== TODAY;
      uniqueDays = newDay ? row.unique_days + 1 : row.unique_days;

      if (newDay) {
        await supabase
          .from("user_sessions")
          .update({
            unique_days: uniqueDays,
            last_view_date: TODAY,
            updated_at: new Date().toISOString(),
          })
          .eq("id", row.id);
      }
    } else {
      await supabase.from("user_sessions").insert({
        user_id: userId,
        unique_days: 1,
        last_view_date: TODAY,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      });
    }

    return NextResponse.json(
      {
        showPaywall: uniqueDays >= gateDays,
        uniqueDays,
        gateDays,
      },
      { status: 200 },
    );
  } catch (e) {
    console.error("[update-and-check] DB failure:", e);
    /* fail open */
    return NextResponse.json(
      { showPaywall: false, uniqueDays: 0 },
      { status: 200 },
    );
  }
}

export function GET() {
  return NextResponse.json(
    { error: "Method Not Allowed" },
    { status: 405 },
  );
}
</file>

<file path="src/app/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center border rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "bg-primary hover:bg-primary/80 border-transparent text-primary-foreground",
        secondary:
          "bg-secondary hover:bg-secondary/80 border-transparent text-secondary-foreground",
        destructive:
          "bg-destructive hover:bg-destructive/80 border-transparent text-destructive-foreground",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/app/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/app/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(" flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/app/components/ui/dialog.tsx">
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

// Custom type to include className
interface CustomDialogPortalProps extends DialogPrimitive.DialogPortalProps {
  className?: string;
}

const DialogPortal = ({
  className,
  children,
  ...props
}: CustomDialogPortalProps) => (
  <DialogPrimitive.Portal {...props}>
    <div className={cn("fixed inset-0 z-50 flex items-start justify-center sm:items-center", className)}>
      {children}
    </div>
  </DialogPrimitive.Portal>
);
DialogPortal.displayName = DialogPrimitive.Portal.displayName;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm transition-all duration-100 data-[state=closed]:animate-out data-[state=closed]:fade-out data-[state=open]:fade-in",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 grid w-full gap-4 rounded-b-lg border bg-background p-6 shadow-lg animate-in data-[state=open]:fade-in-90 data-[state=open]:slide-in-from-bottom-10 sm:max-w-lg sm:rounded-lg sm:zoom-in-90 data-[state=open]:sm:slide-in-from-bottom-0",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
</file>

<file path="src/app/components/ui/separator.tsx">
"use client";

import React from "react";
import { cn } from "@/lib/utils";

type SeparatorProps = React.HTMLAttributes<HTMLDivElement>;

const Separator = React.forwardRef<HTMLDivElement, SeparatorProps>(
  ({ className, ...props }, ref) => {
    return (
      <div ref={ref} className={cn("h-px bg-gray-200 my-4", className)} {...props} />
    );
  }
);

Separator.displayName = "Separator";

export { Separator };
export default Separator;
</file>

<file path="src/app/components/ui/toggle-group.tsx">
/* src/app/components/ui/toggle-group.tsx */
"use client" // Assuming this is a client component

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { VariantProps, cva } from "class-variance-authority"

import { cn } from "@/lib/utils" // Assuming path is correct

// REMOVE COOKIE LOGIC FROM HERE - IT DOESN'T BELONG IN A UI COMPONENT
// const cookieStore = cookies(); // <<< DELETE THIS LINE
// const visitorId = cookieStore.get('datafast_visitor_id')?.value; // <<< DELETE THIS LINE
// const sessionId = cookieStore.get('datafast_session_id')?.value; // <<< DELETE THIS LINE

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleGroupItemVariants>
>({
  size: "default",
  variant: "default",
})

const toggleGroupItemVariants = cva(
  "inline-flex items-center justify-center text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border-r border-input bg-transparent last:border-0 hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleGroupItemVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center overflow-hidden rounded-md border border-input bg-transparent shadow", // Original classes
      className
    )}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleGroupItemVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleGroupItemVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/app/components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors data-[state=on]:bg-accent data-[state=on]:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ring-offset-background hover:bg-muted hover:text-muted-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "bg-transparent border border-input hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/app/contact/page.tsx">
export const metadata = {
    title: 'Contact | First Serve Seattle',
    description: 'How to reach First Serve Seattle support.',
  }
  
  export default function ContactPage() {
    return (
      <section className="mx-auto max-w-xl px-4 py-12">
        <h1 className="mb-8 text-3xl font-bold">Contact Us</h1>
  
        <p className="mb-6 text-gray-700">
          We welcome feedback, bug reports, and partnership inquiries. You can
          reach us via the following channels:
        </p>
  
        <ul className="space-y-4 text-gray-700">
          <li>
            <span className="font-semibold">Email:</span>{' '}
            <a
              href="mailto:support@firstserveseattle.com"
              className="underline"
            >
              support@firstserveseattle.com
            </a>
          </li>
          <li>
            <span className="font-semibold">Phone:</span>{' '}
            <a href="tel:2064573039" className="underline">
              (206) 457-3039
            </a>{' '}
            (voicemail—responses in 2–3 business days)
          </li>
        </ul>
      </section>
    )
  }
</file>

<file path="src/app/courts/[slug]/page.tsx">
// src/app/courts/[slug]/page.tsx
// Server Component (default) – no `use client` needed

type Params = Promise<{ slug: string }>;

export default async function CourtDetailPage({
  params,
}: {
  params: Params;
}) {
  // Resolve the promise that Next.js passes in v15+
  const { slug: courtSlug } = await params;

  // ▸ Fetch data with `courtSlug` here if required

  return (
    <div>
      <h1>Court Detail Page</h1>
      <p>Details for court with slug: {courtSlug}</p>
    </div>
  );
}

/* --- OPTIONAL EXTRAS ------------------------------------------------------ */

// Dynamic metadata (same async-params rule)
import type { Metadata } from 'next';

export async function generateMetadata({
  params,
}: {
  params: Params;
}): Promise<Metadata> {
  const { slug } = await params;
  return { title: `Court Details: ${slug}` };
}

// ISR / SSG helper (signature unchanged)
export async function generateStaticParams(): Promise<{ slug: string }[]> {
  return [{ slug: 'example-court-1' }, { slug: 'example-court-2' }];
}
</file>

<file path="src/app/courts/layout.tsx">
// src/app/courts/layout.tsx
import React from 'react';

export default function CourtsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // This layout inherits <html>, <head>, <body>, global styles, etc.
  // from src/app/layout.tsx.
  // It just needs to render its children.
  return <>{children}</>;
}
</file>

<file path="src/app/courts/page.tsx">
// src/app/courts/page.tsx
import React from 'react';

// Import the FacilityGrid component using the RELATIVE path
// This bypasses the tsconfig alias for diagnostics.
import FacilityGrid from '../../components/facility/FacilityGrid';

// This page component can remain async if FacilityGrid fetches data internally
// or if you plan to add other async operations later. Otherwise, it can be sync.
export default async function CourtsPage() {

  console.log("Rendering the main /courts listing page using FacilityGrid.");

  return (
    <div className="container mx-auto p-4">
      {/* You might want a heading specific to the facility grid */}
      <h1 className="text-2xl font-bold mb-4">Tennis Facilities</h1>

      {/* Render the FacilityGrid component */}
      {/* Pass any necessary props to FacilityGrid if required */}
      <FacilityGrid />

    </div>
  );
}
</file>

<file path="src/app/faq/page.tsx">
export const metadata = {
    title: 'FAQ | First Serve Seattle',
    description: 'Frequently asked questions about First Serve Seattle.',
  }
  
  export default function FAQPage() {
    return (
      <section className="mx-auto max-w-3xl px-4 py-12">
        <h1 className="mb-8 text-3xl font-bold">Frequently Asked Questions</h1>
  
        <dl className="space-y-8">
          {/* Q1 */}
          <div>
            <dt className="font-semibold">
              1. What is First Serve Seattle?
            </dt>
            <dd className="mt-1 text-gray-700">
              A private website that reads and displays Seattle&nbsp;Parks&nbsp;&amp;&nbsp;Recreation’s
              public tennis-court reservation feed so players can plan court time
              without using the City’s midnight lock-out interface.
            </dd>
          </div>
  
          {/* Q2 */}
          <div>
            <dt className="font-semibold">
              2. Are you affiliated with Seattle Parks&nbsp;&amp;&nbsp;Recreation?
            </dt>
            <dd className="mt-1 text-gray-700">
              <strong>No.</strong> First Serve Seattle has no sponsorship, endorsement,
              or contractual relationship with SPR. All permits and on-court rule
              enforcement remain 100&nbsp;percent with the City.
            </dd>
          </div>
  
          {/* Q3 */}
          <div>
            <dt className="font-semibold">
              3. How is the service priced?
            </dt>
            <dd className="mt-1 text-gray-700 space-y-1">
              <p>&bull; Each visitor gets <strong>three free open-court views</strong>.</p>
              <p>&bull; After that you may start a <strong>14-day free trial</strong> of unlimited views.</p>
              <p>&bull; Continued unlimited access is <strong>$8&nbsp;/&nbsp;month</strong> (cancel any time).</p>
              <p>No payment is required unless you opt-in after the trial.</p>
            </dd>
          </div>
  
          {/* Q4 */}
          <div>
            <dt className="font-semibold">
              4. How do I verify that someone’s reservation is valid?
            </dt>
            <dd className="mt-1 text-gray-700">
              Only SPR can confirm permits. Call&nbsp;
              <a href="tel:2066844060" className="underline">
                (206)&nbsp;684-4060
              </a>
              . If no permit exists, courts are first-come, first-served under SPR rules.
            </dd>
          </div>
  
          {/* Q5 */}
          <div>
            <dt className="font-semibold">
              5. Who enforces court etiquette (pickleball on tennis lines, large groups, etc.)?
            </dt>
            <dd className="mt-1 text-gray-700">
              SPR rangers or on-site staff. First Serve Seattle only displays data
              and has no authority to intervene.
            </dd>
          </div>
  
          {/* Q6 */}
          <div>
            <dt className="font-semibold">
              6. Do you store or sell my personal data?
            </dt>
            <dd className="mt-1 text-gray-700">
              Viewing the calendar anonymously requires no account. If you start a
              trial or subscription, Stripe processes payment; we retain only minimal
              billing records for bookkeeping and never sell user data.
            </dd>
          </div>
  
          {/* Q7 */}
          <div>
            <dt className="font-semibold">
              7. How quickly will you reply to support inquiries?
            </dt>
            <dd className="mt-1 text-gray-700">
              We respond within <strong>2–3 business days</strong> to email or voicemail at
              (206)&nbsp;457-3039.
            </dd>
          </div>
  
          {/* Q8 */}
          <div>
            <dt className="font-semibold">
              8. I found a bug or feature idea. Where do I send it?
            </dt>
            <dd className="mt-1 text-gray-700">
              Email&nbsp;
              <a
                href="mailto:support@firstserveseattle.com"
                className="underline"
              >
                support@firstserveseattle.com
              </a>{' '}
              with the court, date, time, and a screenshot if possible.
            </dd>
          </div>
  
          {/* Q9 */}
          <div>
            <dt className="font-semibold">
              9. Who owns and operates First Serve Seattle?
            </dt>
            <dd className="mt-1 text-gray-700 space-y-1">
              <p>
                First Serve Seattle is a registered DBA of <strong>Simple&nbsp;Apps&nbsp;LLC</strong> (Wyoming).
              </p>
              <p>&bull; Foreign-entity registration filed in Washington.</p>
              <p>&bull; Seattle General Business License&nbsp;#&nbsp;605888557 issued 2&nbsp;May&nbsp;2025.</p>
            </dd>
          </div>
  
          {/* Q10 */}
          <div>
            <dt className="font-semibold">
              10. How do I cancel my subscription?
            </dt>
            <dd className="mt-1 text-gray-700">
              Use the “Manage Subscription” link in your account settings or email
              support—cancellations are processed the same business day.
            </dd>
          </div>
        </dl>
      </section>
    )
  }
</file>

<file path="src/app/privacy-policy/page.tsx">
import { Card, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";

const PrivacyPolicy = () => {
  return (
    <div className="bg-slate-50 min-h-screen py-12">
      <div className="container mx-auto px-4 max-w-4xl">
        <Card className="shadow-lg">
          <CardContent className="p-8">
            <div className="space-y-8">
              <div className="space-y-2">
                <h1 className="text-4xl font-bold text-slate-900">Privacy Policy</h1>
                <p className="text-slate-500">
                  <strong>Effective Date:</strong> March 1, 2025
                </p>
                <Separator className="my-4" />
              </div>

              <div className="text-slate-700">
                <p className="leading-relaxed">
                  Simple Apps, LLC (&quot;we,&quot; &quot;our,&quot; or &quot;us&quot;) is committed to protecting your
                  privacy. This Privacy Policy outlines how we collect, use, and safeguard your information when you use
                  the First Serve Seattle app (&quot;the App&quot;). By using the App, you agree to the terms of this
                  Privacy Policy. 
                </p>
              </div>

              <Section title="1. Information We Collect">
                <ul className="list-disc list-outside ml-6 space-y-2">
                  <li>
                    <strong>Personal Information:</strong> Name, email address, and payment information (processed
                    securely through Stripe).
                  </li>
                  <li>
                    <strong>Usage Data:</strong> Information about how you interact with the App, such as court
                    preferences and search history.
                  </li>
                  <li>
                    <strong>Device Information:</strong> Information about the device you use to access the App,
                    including device type, operating system, and IP address.
                  </li>
                </ul>
              </Section>

              <Section title="2. How We Use Your Information">
                <p className="mb-3">We use the information collected to:</p>
                <ul className="list-disc list-outside ml-6 space-y-2">
                  <li>Provide and improve the App&apos;s functionality.</li>
                  <li>Facilitate bookings and manage your account.</li>
                  <li>Communicate with you about updates, promotions, or support inquiries.</li>
                  <li>Analyze usage trends to improve the user experience.</li>
                </ul>
              </Section>

              <Section title="3. Data Sharing">
                <p className="mb-3">
                  We do not sell, rent, or share your personal information with third parties for their marketing
                  purposes. However, we may share data with:
                </p>
                <ul className="list-disc list-outside ml-6 space-y-2">
                  <li>
                    <strong>Service Providers:</strong> For payment processing (e.g., Stripe) or analytics.
                  </li>
                  <li>
                    <strong>Legal Authorities:</strong> When required by law or to protect our legal rights.
                  </li>
                </ul>
              </Section>

              <Section title="4. Data Security">
                <p className="leading-relaxed">
                  We implement reasonable measures to protect your information from unauthorized access, disclosure, or
                  destruction. However, no security measures are completely secure, and we cannot guarantee absolute
                  security.
                </p>
              </Section>

              <Section title="5. Your Rights">
                <ul className="list-disc list-outside ml-6 space-y-2">
                  <li>Access, update, or delete your personal information by contacting us.</li>
                  <li>Opt out of promotional communications.</li>
                </ul>
              </Section>

              <Section title="6. Third-Party Links">
                <p className="leading-relaxed">
                  The App may contain links to third-party websites or services. We are not responsible for the privacy
                  practices of these external sites.
                </p>
              </Section>

              <Section title="7. Changes to This Privacy Policy">
                <p className="leading-relaxed">
                  We may update this Privacy Policy from time to time. Changes will be posted on this page with an
                  updated effective date.
                </p>
              </Section>

              <Section title="8. Contact Us">
                <p className="mb-3">
                  If you have questions or concerns about this Privacy Policy, please contact us at:
                </p>
                <ul className="list-disc list-outside ml-6 space-y-2">
                  <li>
                    Email:{" "}
                    <a href="mailto:support@firstserveseattle.com" className="text-blue-600 hover:underline">
                      support@firstserveseattle.com
                    </a>
                  </li>
                  <li>Address: Simple Apps, LLC, 1309 Coffeen Avenue STE 1200, Sheridan, Wyoming 82801</li>
                </ul>
              </Section>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

// Helper component for sections
interface SectionProps {
  title: string;
  children: React.ReactNode;
}

const Section: React.FC<SectionProps> = ({ title, children }) => {
  return (
    <div className="space-y-3">
      <h2 className="text-2xl font-semibold text-slate-800">{title}</h2>
      <div className="text-slate-700">{children}</div>
    </div>
  );
};

export default PrivacyPolicy;
</file>

<file path="src/app/request-password-reset/page.tsx">
// src/app/request-password-reset/page.tsx
"use client";

import { useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import Image from "next/image";
import Link from "next/link";

export default function RequestPasswordResetPage() {
  const supabase = createClientComponentClient();
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleRequestReset = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage("");
    setError("");
    setLoading(true);

    const redirectUrl = `${window.location.origin}/reset-password`;

    const { error: resetError } = await supabase.auth.resetPasswordForEmail(
      email,
      { redirectTo: redirectUrl },
    );

    setLoading(false);

    if (resetError) {
      if (resetError.message.includes("Unable to validate email address")) {
        setError("Please enter a valid email address.");
      } else if (
        resetError.message.includes(
          "For security purposes, you can only request this once every",
        )
      ) {
        setError(
          "Password reset request already sent recently. Please check your email (including spam folder) or wait a few minutes before trying again.",
        );
      } else {
        setError(
          "Failed to send reset link. Please check the email address or try again later.",
        );
      }
    } else {
      setMessage(
        "Password reset email sent! Check your inbox (and spam folder) for the link.",
      );
      setEmail("");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 px-4 py-12">
      <div className="w-full max-w-md">
        <div className="flex justify-center mb-8">
          <Image
            src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
            alt="First Serve Seattle Logo"
            width={80}
            height={80}
            priority
          />
        </div>

        <div className="bg-white p-8 rounded-xl shadow-lg border border-gray-100">
          <h1 className="text-2xl font-bold text-center mb-6 text-gray-800">
            Reset Your Password
          </h1>
          <p className="text-sm text-center text-gray-600 mb-6">
            Enter your email address below, and we&apos;ll send you a link to set
            a new password.
          </p>

          {message && (
            <div className="mb-4 rounded-md bg-green-50 p-3 text-sm text-green-700 border border-green-200">
              {message}
            </div>
          )}
          {error && (
            <div className="mb-4 rounded-md bg-red-50 p-3 text-sm text-red-700 border border-red-200">
              {error}
            </div>
          )}

          {!message && (
            <form onSubmit={handleRequestReset} className="space-y-5">
              <div>
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Email Address
                </label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="block w-full rounded-lg border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-200"
                  required
                  placeholder="you@example.com"
                  autoComplete="email"
                />
              </div>

              <button
                type="submit"
                className="w-full rounded-lg bg-[#0c372b] px-5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-[#0c372b]/90 focus:outline-none focus:ring-2 focus:ring-[#0c372b] focus:ring-offset-2 disabled:opacity-70 disabled:cursor-not-allowed"
                disabled={loading}
              >
                {loading ? "Sending..." : "Send Reset Link"}
              </button>
            </form>
          )}

          <div className="mt-6 text-center text-sm text-gray-600">
            <p>
              Remembered your password?{" "}
              <Link
                href="/login"
                className="font-medium text-blue-600 hover:underline"
              >
                Sign In
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/reset-password/page.tsx">
// src/app/reset-password/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

export default function ResetPasswordPage() {
  const supabase = createClientComponentClient();
  const router = useRouter();

  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isReady, setIsReady] = useState(false);

  // Listen for auth state changes to know when the session from the fragment is processed
  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange(
      // Using '_session' parameter to satisfy the linter rule explicitly
      async (event, _session) => {
         // Log the event and session (even if null) to ensure '_session' is "used"
         console.log(`Auth event: ${event}`, _session);

         // Check specifically for the PASSWORD_RECOVERY event
         if (event === "PASSWORD_RECOVERY") {
            console.log("Password recovery event detected, ready to update.");
            setIsReady(true);
         } else if (event === "SIGNED_IN") {
            // Could also indicate readiness if signed in via recovery
             console.log("Signed in event detected during potential recovery.");
             setIsReady(true);
         }
          // Handle other events if needed
      }
    );

     // Initial check in case the event fired before listener attached
     if (typeof window !== "undefined" && window.location.hash.includes('type=recovery')) {
        console.log("Recovery fragment detected on initial load.");
        // Give Supabase a moment to process the fragment if needed
        setTimeout(() => setIsReady(true), 50);
     } else {
         console.log("No recovery fragment detected.");
         // Optionally set an error if no recovery fragment is present
         // setError("Invalid or expired password reset link.");
         // setIsReady(true); // Allow rendering error state
     }


    return () => {
      authListener?.subscription.unsubscribe();
    };
  }, [supabase.auth, router]);


  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (password !== confirmPassword) {
      setError("Passwords do not match.");
      return;
    }
     if (!isReady) {
         setError("Verifying link... Please wait a moment.");
         return;
     }

    setLoading(true);

    try {
       // Directly update the user's password.
       // Supabase client handles the session context from the URL fragment.
      const { error: updateError } = await supabase.auth.updateUser({
        password: password,
      });

      if (updateError) {
        // Check for specific errors, e.g., weak password
        if (updateError.message.includes("Password should be at least 6 characters")) {
             setError("Password must be at least 6 characters long.");
         } else {
             setError(`Failed to update password: ${updateError.message}`);
         }
        setLoading(false);
        return;
      }

      setSuccess(true);
      setLoading(false);

      // Redirect to login after success
      setTimeout(() => {
        router.push("/login"); // Redirect to login page
      }, 3000);

    } catch (err: unknown) {
      setError( err instanceof Error ? err.message : "An unexpected error occurred. Please try again.");
      setLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
       <div className="w-full max-w-md bg-white p-6 rounded-lg shadow-md">
         <h1 className="text-2xl font-bold text-center mb-4">Set New Password</h1>
         {success ? (
           <p className="text-green-500 text-sm text-center mb-4">
             Password updated successfully! Redirecting to login...
           </p>
         ) : (
           <form onSubmit={handleResetPassword}>
             {error && (
               <p className="text-red-500 text-sm text-center mb-4">{error}</p>
             )}
             {!isReady && !error && (
                 <p className="text-blue-500 text-sm text-center mb-4">Verifying reset link...</p>
             )}
             <div className="mb-4">
               <label htmlFor="password" className="block text-sm font-medium text-gray-700">New Password</label>
               <input
                 id="password" type="password" value={password}
                 onChange={(e) => setPassword(e.target.value)}
                 className="w-full mt-1 p-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500"
                 required disabled={!isReady || loading}
               />
             </div>
             <div className="mb-6">
               <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">Confirm Password</label>
               <input
                 id="confirmPassword" type="password" value={confirmPassword}
                 onChange={(e) => setConfirmPassword(e.target.value)}
                 className="w-full mt-1 p-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500"
                 required disabled={!isReady || loading}
               />
             </div>
             <button type="submit"
               className="w-full bg-black text-white py-2 rounded-lg hover:bg-gray-800 disabled:opacity-50"
               disabled={!isReady || loading}>
               {loading ? "Updating..." : "Set New Password"}
             </button>
           </form>
         )}
       </div>
     </div>
  );
}
</file>

<file path="src/app/signup/layout.tsx">
export const dynamic = "force-dynamic";

export default function SignupLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}
</file>

<file path="src/app/tennis-courts/components/AboutUs.tsx">
// src/app/tennis-courts/components/AboutUs.tsx
'use client' // Needed for useEffect and event handlers

import React, { useEffect } from 'react'
import Image from 'next/image'
import { Button } from '@/components/ui/button'
import { X, Info, KeyRound, AlertTriangle } from 'lucide-react'

interface AboutUsProps {
  isOpen: boolean
  onClose: () => void
}

export default function AboutUs({ isOpen, onClose }: AboutUsProps) {
  /* ------------------------------------------------------------------ */
  /*  Lock body scroll when modal is open                               */
  /* ------------------------------------------------------------------ */
  useEffect(() => {
    document.body.style.overflow = isOpen ? 'hidden' : 'unset'
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  if (!isOpen) return null

  /* ------------------------------------------------------------------ */
  /*  Modal                                                             */
  /* ------------------------------------------------------------------ */
  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4 backdrop-blur-sm animate-in fade-in-0 duration-300"
      onClick={onClose}
    >
      <div
        className="relative flex max-h-[90vh] w-full max-w-lg flex-col overflow-hidden rounded-xl border border-gray-200 bg-white shadow-2xl animate-in zoom-in-95 fade-in-0 duration-300"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute right-3 top-3 z-10 rounded-full p-1.5 text-gray-400 hover:bg-gray-100 hover:text-gray-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
          aria-label="Close modal"
        >
          <X size={22} />
        </button>

        {/* Scrollable content */}
        <div className="overflow-y-auto p-6 sm:p-8">
          <div className="mb-6 text-center">
            <div className="mb-3 inline-block rounded-full bg-green-100 p-2">
              <Image
                src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
                alt="First Serve Seattle Logo"
                width={48}
                height={48}
                priority
              />
            </div>
            <h2 className="text-2xl font-semibold tracking-tight text-gray-900 sm:text-3xl">
              Spend Less Time Searching,
              <br /> More Time Playing!
            </h2>
            <p className="mt-2 text-base text-gray-600">
              Your daily guide to open courts in Seattle.
            </p>
          </div>

          <div className="space-y-6">
            {/* How It Works */}
            <div className="flex items-start gap-3">
              <Info size={20} className="mt-1 flex-shrink-0 text-blue-600" />
              <div>
                <h3 className="mb-1 font-semibold text-gray-800">How It Works</h3>
                <p className="text-sm leading-relaxed text-gray-600">
                  First Serve Seattle checks the official Parks reservation system each morning to
                  show you today&apos;s available public tennis and pickleball courts for walk-on
                  play. No more guesswork!
                </p>
              </div>
            </div>

            {/* Availability Key */}
            <div className="rounded-lg border border-gray-200 bg-gray-50/80 p-4">
              <div className="mb-3 flex items-center gap-2">
                <KeyRound size={18} className="text-gray-600" />
                <h3 className="font-semibold text-gray-800">Availability Key</h3>
              </div>
              <div className="space-y-2 text-sm">
                <div className="flex items-center">
                  <span className="mr-2 h-3.5 w-3.5 flex-shrink-0 rounded-full border border-green-600/50 bg-green-500"></span>
                  <span className="w-16 font-medium text-gray-700">Green:</span>
                  <span className="text-gray-600">Fully Available</span>
                </div>
                <div className="flex items-center">
                  <span className="mr-2 h-3.5 w-3.5 flex-shrink-0 rounded-full border border-orange-500/50 bg-orange-400"></span>
                  <span className="w-16 font-medium text-gray-700">Orange:</span>
                  <span className="text-gray-600">Partially Available</span>
                </div>
                <div className="flex items-center">
                  <span className="mr-2 h-3.5 w-3.5 flex-shrink-0 rounded-full border border-gray-500/50 bg-gray-400"></span>
                  <span className="w-16 font-medium text-gray-700">Gray:</span>
                  <span className="text-gray-600">Fully Reserved</span>
                </div>
              </div>
              <p className="mt-3 border-t border-gray-200 pt-2 text-xs text-gray-500">
                Availability is based on schedule data checked this morning. Real-time court
                status may vary due to recent bookings or walk-ons.
              </p>
            </div>

            {/* Booking Ahead */}
            <div className="flex items-start gap-3">
              <AlertTriangle
                size={20}
                className="mt-1 flex-shrink-0 text-orange-600"
              />
              <div>
                <h3 className="mb-1 font-semibold text-gray-800">Booking Ahead?</h3>
                <p className="text-sm leading-relaxed text-gray-600">
                  This app shows <span className="font-medium">today&apos;s</span>
                  &nbsp;walk-on potential. To reserve courts for future dates, please use the
                  official&nbsp;
                  <a
                    href="https://anc.apm.activecommunities.com/seattle/reservation/search?facilityTypeIds=39%2C115&resourceType=0&equipmentQty=0"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="font-medium text-blue-600 hover:underline"
                  >
                    Seattle Parks Reservation Site
                  </a>
                  .
                </p>
              </div>
            </div>

            {/* SPR disclaimer */}
            <p className="mt-6 text-center text-xs text-gray-500">
              First&nbsp;Serve&nbsp;Seattle is an independent community resource and is not
              associated with Seattle Parks&nbsp;&amp;&nbsp;Recreation.
            </p>
          </div>
        </div>

        {/* Modal footer / CTA */}
        <div className="mt-auto border-t border-gray-200 bg-gray-50 p-6 pt-4">
          <Button
            onClick={() => (window.location.href = '/signup')}
            className="w-full bg-[#0c372b] px-6 py-3 text-base font-semibold text-white hover:bg-[#0c372b]/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
          >
            Get Unlimited Court Checks
          </Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/tennis-courts/components/counter.tsx">
// src/app/tennis-courts/components/counter.tsx
import React from 'react';
import { Button } from '@/components/ui/button'; // Adjust path if needed
import { Card, CardContent } from '@/components/ui/card'; // Adjust path if needed

const ViewsCounter = ({ viewsCount }: { viewsCount: number }) => {
  const maxViews = 3; // Total free views allowed

  // Map numbers to ordinal words
  const ordinalMap: { [key: number]: string } = {
    1: 'First',
    2: 'Second',
    3: 'Third'
  };

  // Calculate the current view number (1-based index)
  // Add 1 because viewsCount is 0-based (0 means first view, 1 means second, etc.)
  const currentViewNumber = Math.min(viewsCount + 1, maxViews + 1); // +1 to handle reaching the limit correctly

  // Calculate remaining views *after* this one
  // If currentViewNumber is 4 (meaning viewsCount was 3), remaining is 0
  const remainingViews = Math.max(0, maxViews - currentViewNumber);

  // Get the ordinal word for the current view
  const currentViewOrdinal = ordinalMap[currentViewNumber] || `${currentViewNumber}th`;

  let displayText = "";
  // Show remaining count logic when views are less than the max
  if (viewsCount < maxViews) {
      // Example: viewsCount = 0 => current=1, remaining=2 => "First Free Court Check - 2 Remaining"
      // Example: viewsCount = 1 => current=2, remaining=1 => "Second Free Court Check - 1 Remaining"
      // Example: viewsCount = 2 => current=3, remaining=0 => "Third Free Court Check - 0 Remaining"
      displayText = `${currentViewOrdinal} Free Court Check - ${remainingViews} Remaining`;
  }
  // Show specific message when the limit is reached or exceeded
  else {
      // LINT/RENDER FIX: Use a direct apostrophe within the JS string template literal
      displayText = `You've used all ${maxViews} free checks`;
  }


  return (
    <Card className="mb-6 border-blue-200 bg-blue-50">
      <CardContent className="pt-4 pb-4 md:pt-6 md:pb-6">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-3 sm:gap-4">
          <div className="flex items-center gap-2">
            {/* Using text-xl or text-lg for emoji size control */}
            <span className="text-xl leading-none" role="img" aria-label="Tennis ball icon">🎾</span>
            {/* Display the calculated text */}
            <span className="text-sm font-medium text-blue-800 text-center sm:text-left">
              {displayText}
            </span>
          </div>
          {/* Button remains the same */}
          <Button asChild size="sm" className="bg-[#0c372b] hover:bg-[#0c372b]/90 text-white whitespace-nowrap w-full sm:w-auto">
            <a href="/signup">
              Get Unlimited Checks
            </a>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ViewsCounter;
</file>

<file path="src/app/tennis-courts/components/DaysCounter.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";

export default function DaysCounter({
  uniqueDays,
  gateDays,
}: {
  uniqueDays: number;
  gateDays: number;
}) {
  const remaining = gateDays - uniqueDays;
  const message =
    uniqueDays < gateDays
      ? `${remaining} free day${remaining === 1 ? "" : "s"} left`
      : "Free limit reached";

  return (
    <Card className="mb-6 border-blue-200 bg-blue-50">
      <CardContent className="flex items-center justify-between gap-3 py-4">
        <span className="text-sm font-medium text-blue-800">{message}</span>
        <a href="/signup" className="rounded bg-[#0c372b] px-3 py-1 text-white">
          Get Unlimited
        </a>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/app/terms-of-service/page.tsx">
import React from 'react';

const TermsOfService = () => {
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <h1 className="text-3xl font-bold mb-6">Terms of Service</h1>
      <p className="mb-4"><strong>Effective Date:</strong> February 15, 2025</p>
      <p className="mb-6">
        These Terms of Service (&quot;Terms&quot;) govern your use of the First Serve Seattle app (&quot;the App&quot;),
        owned and operated by Simple Apps, LLC (&quot;we,&quot; &quot;our,&quot; or &quot;us&quot;). By accessing or using the App,
        you agree to these Terms. If you do not agree, please refrain from using the App.
      </p>
      
      <h2 className="text-2xl font-semibold mb-4">1. Account Registration</h2>
      <ul className="list-disc list-inside mb-6">
        <li>You must provide accurate and complete information during registration.</li>
        <li>You are responsible for maintaining the confidentiality of your account credentials.</li>
      </ul>
      
      <h2 className="text-2xl font-semibold mb-4">2. Use of the App</h2>
      <ul className="list-disc list-inside mb-6">
        <li>You may use the App only for lawful purposes.</li>
        <li>You agree not to engage in any activity that disrupts or interferes with the App&apos;s functionality.</li>
      </ul>
      
      <h2 className="text-2xl font-semibold mb-4">3. Payments and Subscriptions</h2>
      <ul className="list-disc list-inside mb-6">
        <li>Payments are processed securely via Stripe.</li>
        <li>Subscriptions renew automatically unless canceled.</li>
        <li><strong>No Refunds:</strong> All payments are final. However, you may cancel your subscription at any time via Stripe to avoid future charges.</li>
      </ul>
      
      <h2 className="text-2xl font-semibold mb-4">4. Intellectual Property</h2>
      <p className="mb-6">All content, features, and functionality of the App are owned by Simple Apps, LLC and protected by intellectual property laws.</p>
      
      <h2 className="text-2xl font-semibold mb-4">5. Limitation of Liability</h2>
      <p className="mb-6">The App is provided &quot;as is&quot; without warranties of any kind. We are not liable for any damages resulting from your use of the App, to the fullest extent permitted by law.</p>
      
      <h2 className="text-2xl font-semibold mb-4">6. Termination</h2>
      <ul className="list-disc list-inside mb-6">
        <li>We may suspend or terminate your account if you violate these Terms.</li>
        <li>You may cancel your account at any time through the App or by contacting support.</li>
      </ul>
      
      <h2 className="text-2xl font-semibold mb-4">7. Changes to These Terms</h2>
      <p className="mb-6">We may update these Terms from time to time. Changes will be posted on this page with an updated effective date.</p>
      
      <h2 className="text-2xl font-semibold mb-4">8. Governing Law</h2>
      <p className="mb-6">These Terms are governed by the laws of the State of Wyoming, without regard to its conflict of laws principles.</p>
      
      <h2 className="text-2xl font-semibold mb-4">9. Ball Machine Rentals</h2>
      <p className="mb-6">By renting the Proton Tennis Ball Machine (&quot;Equipment&quot;) from Seattle Tennis Ball Machine Rental, you (&quot;Renter&quot;) agree to the following terms and conditions:</p>
      <ul className="list-disc list-inside mb-6">
        <li>The rental period begins at the time of pick-up/delivery and ends upon return.</li>
        <li>Late returns are subject to additional charges of $150 per hour.</li>
        <li>The Renter agrees to pay the rental fee specified at booking.</li>
        <li>The Equipment will be inspected before and after rental; damages or losses will be charged at full retail value.</li>
        <li>The Equipment must only be used for tennis practice in a safe and responsible manner.</li>
        <li>The Renter assumes all risks associated with use, including injury or property damage.</li>
        <li>Seattle Tennis Ball Machine Rental is not liable for any damages or injuries incurred during use.</li>
        <li>The Renter agrees to indemnify and hold harmless Seattle Tennis Ball Machine Rental and its affiliates.</li>
        <li>Any lost tennis balls will be charged at $1.50 per ball.</li>
        <li>Seattle Tennis Ball Machine Rental reserves the right to terminate the rental agreement if the Renter violates these terms.</li>
        <li>This agreement is governed by the laws of the state of Washington.</li>
      </ul>
      
      <h2 className="text-2xl font-semibold mb-4">10. Contact Us</h2>
      <p>
        If you have questions or concerns about these Terms, please contact us at:
      </p>
      <ul className="list-disc list-inside mt-4">
        <li>Email: support@firstserveseattle.com</li>
        <li>Address: Simple Apps, LLC, 1309 Coffeen Avenue STE 1200, Sheridan, Wyoming 82801</li>
      </ul>
    </div>
  );
};

export default TermsOfService;
</file>

<file path="src/app/globals.css">
/* src/app/globals.css */

/* Tailwind base, components, utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Force site to be white background, black text */
:root {
  --background: #ffffff;
  --foreground: #000000;
}

/* If you had a dark mode media query, comment it out or remove it:
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
*/

/* Basic styling for the site body */
body {
  background-color: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
  margin: 0;
  padding: 0;
}

/* h1 remains green (#0c372b). 
   Use !important if something else overrides it. */
h1 {
  color: #0c372b;
}
</file>

<file path="src/app/randomUserSetup.ts">
// src/app/randomUserSetup.ts (FULL FILE - optional name)

"use client"

import { useEffect } from "react"

// This ensures each browser has a persistent random userId in localStorage
export function useRandomUserId() {
  useEffect(() => {
    let userId = localStorage.getItem("userId")
    if (!userId) {
      userId = crypto.randomUUID()
      localStorage.setItem("userId", userId)
    }
  }, [])
}
</file>

<file path="src/components/facility/FacilityCard.tsx">
// components/facility/FacilityCard.tsx
import React from 'react';
import Link from 'next/link';

// Import the type definition for a court
import { TennisCourt } from '@/lib/getTennisCourts'; // Adjust path if needed

// Import UI components if you're using a library like shadcn/ui
// Example: import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"; // Adjust path

// Define the props for the component
interface FacilityCardProps {
  court: TennisCourt;
}

// Export the component as default
export default function FacilityCard({ court }: FacilityCardProps) {
  // Basic card structure - Replace with <Card> components if using shadcn/ui
  return (
    <div className="border rounded-lg shadow-sm overflow-hidden h-full flex flex-col">
      {/* Card Header (Example) */}
      <div className="p-4 bg-gray-50 border-b">
        <h3 className="font-semibold text-lg">{court.title || 'Unnamed Facility'}</h3>
      </div>

      {/* Card Content (Example) */}
      <div className="p-4 flex-grow">
        <p className="text-sm text-gray-600">
          {court.address || 'Address not available'}
        </p>
        {/* Add more details here as needed - e.g., amenities, link to map */}
      </div>

      {/* Card Footer (Example with Link) */}
      {/* Ensure you have a unique identifier like a slug or use the ID for the link */}
      {/* If you don't have a slug yet, you might need to generate one or use the ID */}
      <div className="p-4 bg-gray-50 border-t mt-auto">
        <Link
          // Assuming you want to link to the dynamic route we set up
          // You might need to create a 'slug' field for your courts or use the ID
          href={`/courts/${court.id}`} // Example using ID, adjust if you have slugs
          className="text-blue-600 hover:underline text-sm font-medium"
        >
          View Details & Availability
        </Link>
      </div>
    </div>
  );
}
</file>

<file path="src/components/facility/FacilityGrid.tsx">
// components/facility/FacilityGrid.tsx
import React from 'react';

// Import the function to fetch court data
// Adjust the path if your lib directory is structured differently
import { getTennisCourts, TennisCourt } from '@/lib/getTennisCourts';

// Import the card component to render each facility
import FacilityCard from './FacilityCard';

// Define props if the component accepts any (optional for now)
// interface FacilityGridProps {}

// Make the component async to fetch data on the server
export default async function FacilityGrid(/* props: FacilityGridProps */) {
  // Fetch the tennis court data
  const courts: TennisCourt[] = await getTennisCourts();

  console.log(`Rendering FacilityGrid component with ${courts.length} courts.`);

  if (!courts || courts.length === 0) {
    return <p>No facilities found.</p>; // Handle case where no data is returned
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {/* Map over the fetched courts and render a card for each */}
      {courts.map((court) => (
        <FacilityCard key={court.id} court={court} />
      ))}
    </div>
  );
}
</file>

<file path="src/components/ClientIdsInit.tsx">
'use client'

import { useEffect } from 'react'
import { initClientIds } from '@/lib/initClientIds'

export default function ClientIdsInit() {
  useEffect(() => {
    initClientIds()
  }, [])

  return null
}
</file>

<file path="src/components/ClientStorageInit.tsx">
'use client';
import { initLocalStorage } from '@/lib/initLocalStorage';

export default function ClientStorageInit() {
  initLocalStorage();          // runs once per page load
  return null;
}
</file>

<file path="src/lib/getTennisCourts.ts">
import { supabase } from "@/lib/supabaseClient";

/* ---------- local types ---------- */

export interface ParsedInterval {
  date: string;
  start: string;
  end: string;
}

interface CourtRow {
  id: number;
  title: string | null;
  facility_type: string | null;
  address: string | null;
  available_dates: string | null;
  google_map_url: string | null;
  lights: boolean | null;
  hitting_wall: boolean | null;
  pickleball_lined: boolean | null;
  ball_machine: boolean | null;
}

interface PopularityRow {
  court_id: number;
  avg_busy_score_7d: number | null;
}

export interface TennisCourt {
  id: number;
  title: string;
  facility_type: string;
  address: string | null;
  Maps_url: string | null;
  lights: boolean;
  hitting_wall: boolean;
  pickleball_lined: boolean;
  ball_machine: boolean;
  parsed_intervals: ParsedInterval[];
  avg_busy_score_7d: number | null;
}

/* ---------- main fetch ---------- */

export async function getTennisCourts(): Promise<TennisCourt[]> {
  /* 1 ── base court data (no generics on `.from`) */
  const { data: courtData, error: courtErr } = await supabase
    .from("tennis_courts")
    .select(`
      id,
      title,
      facility_type,
      address,
      available_dates,
      google_map_url,
      lights,
      hitting_wall,
      pickleball_lined,
      ball_machine
    `);

  if (courtErr) {
    console.error("[getTennisCourts] court fetch error:", courtErr);
    return [];
  }

  /* 2 ── popularity view */
  const { data: popData, error: popErr } = await supabase
    .from("v_court_popularity_7d")
    .select("court_id, avg_busy_score_7d");

  if (popErr) {
    console.error("[getTennisCourts] popularity fetch error:", popErr);
    return [];
  }

  /* 3 ── normalize results */
  const courts: CourtRow[] = (courtData ?? []) as CourtRow[];
  const pops: PopularityRow[] = (popData ?? []) as PopularityRow[];

  const popMap = new Map<number, number | null>();
  pops.forEach(({ court_id, avg_busy_score_7d }) =>
    popMap.set(court_id, avg_busy_score_7d)
  );

  return courts.map((c) => ({
    id: c.id,
    title: c.title ?? "Unknown Court",
    facility_type: c.facility_type ?? "Unknown",
    address: c.address,
    Maps_url: c.google_map_url,
    lights: c.lights ?? false,
    hitting_wall: c.hitting_wall ?? false,
    pickleball_lined: c.pickleball_lined ?? false,
    ball_machine: c.ball_machine ?? false,
    parsed_intervals: parseAvailableDates(c.available_dates ?? ""),
    avg_busy_score_7d: popMap.get(c.id) ?? null,
  }));
}

/* ---------- helpers ---------- */

function parseAvailableDates(src: string): ParsedInterval[] {
  return src
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean)
    .map((line) => {
      const [datePart, timeRange] = line.split(/\s+(.+)/);
      if (!datePart || !timeRange) return null;
      const [startRaw, endRaw] = timeRange.split("-");
      const start = toAMPM(startRaw.trim());
      const end = toAMPM(endRaw.trim());
      return start && end ? { date: datePart, start, end } : null;
    })
    .filter((x): x is ParsedInterval => x !== null);
}

function toAMPM(raw: string): string {
  const m = raw.match(/^(\d{1,2}):(\d{2})(?::\d{2})?$/);
  if (!m) return "";
  const hh = parseInt(m[1], 10),
    mm = m[2],
    ampm = hh >= 12 ? "PM" : "AM",
    h12 = hh % 12 === 0 ? 12 : hh % 12;
  return `${h12}:${mm} ${ampm}`;
}
</file>

<file path="src/lib/initClientIds.ts">
// src/lib/initClientIds.ts
// Utility to initialize persistent identifiers in the browser.

export function initClientIds(): void {
  if (typeof window === 'undefined') return;

  try {
    let userId = localStorage.getItem('userId');
    if (!userId) {
      userId = crypto.randomUUID();
      localStorage.setItem('userId', userId);
    }

    let visitorId = localStorage.getItem('visitorId');
    if (!visitorId) {
      visitorId = crypto.randomUUID();
      localStorage.setItem('visitorId', visitorId);
    }

    // Track total visits for paywall/analytics experiments
    let visitNumber = parseInt(localStorage.getItem('visitNumber') ?? '0', 10);
    if (Number.isNaN(visitNumber)) visitNumber = 0;
    visitNumber += 1;
    localStorage.setItem('visitNumber', String(visitNumber));

    // Randomly bucket visitors into A/B groups on first visit
    let abGroup = localStorage.getItem('abGroup') as 'A' | 'B' | null;
    if (abGroup !== 'A' && abGroup !== 'B') {
      abGroup = Math.random() < 0.5 ? 'A' : 'B';
      localStorage.setItem('abGroup', abGroup);
    }
  } catch (err) {
    console.error('initClientIds failed:', err);
  }
}
</file>

<file path="src/lib/logEvent.ts">
export type LogMetadata = Record<string, unknown>

/**
 * Send a telemetry event to `/api/log-event`.
 */
export async function logEvent(
  event: string,
  metadata: LogMetadata = {},
): Promise<void> {
  try {
    const extras: LogMetadata = {}
    
    // Only run the local-storage look-ups in the browser
    if (typeof window !== 'undefined') {
      const visitNumber = Number.parseInt(
        localStorage.getItem('visitNumber') ?? '0',
        10,
      )
      if (!Number.isNaN(visitNumber)) extras.visitNumber = visitNumber
      
      const abGroup = localStorage.getItem('abGroup')
      if (abGroup) extras.abGroup = abGroup
      
      const userId = localStorage.getItem('userId')
      if (userId) extras.userId = userId
      
      const stripeCustomerId = localStorage.getItem('stripeCustomerId')
      if (stripeCustomerId) extras.stripeCustomerId = stripeCustomerId
    }
    
    await fetch('/api/log-event', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        event,
        metadata: { ...metadata, ...extras },
        timestamp: new Date().toISOString(),
      }),
    })
  } catch (err) {
    // Non-critical: log and continue
    console.warn('logEvent failed:', event, err)
  }
}
</file>

<file path="src/lib/paywallCopy.ts">
/* -------------------------------------------------------------------------- */
/*  Shared paywall / signup constants                                         */
/* -------------------------------------------------------------------------- */

export const FEATURES: string[] = [
  "See today's availability for ALL public courts",
  "Filter courts by lights, pickleball lines, hitting walls",
  "Save your favorite courts for quick access",
  "Unlimited court checks",
  "Priority customer support",
];

export const HERO_HEADLINES = [
  { group: "A", text: "Stop guessing—start playing!" },
  { group: "B", text: "Never drive to a full court again!" },
] as const;

export const SOCIAL_PROOF =
  "★★★★★  2,500 Seattle players • thousands of court checks last month";
</file>

<file path="src/lib/supabaseClient.ts">
// src/app/supabaseClient.ts

import { createClient } from "@supabase/supabase-js"

// If you store these in .env.local as, e.g.:
// NEXT_PUBLIC_SUPABASE_URL=...
// NEXT_PUBLIC_SUPABASE_ANON_KEY=...
// you can reference them with process.env.<VARIABLE>

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string

// Create and export your Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey)
</file>

<file path="src/lib/updateUserSessions.ts">
// src/lib/updateUserSessions.ts

import { supabase } from "@/lib/supabaseClient"

export async function updateUserSession(userId: string) {
  try {
    // Attempt to find an existing row
    const { data: existing, error: selectError } = await supabase
      .from("user_sessions")
      .select("id, views_count")
      .eq("user_id", userId)
      .maybeSingle()

    if (selectError) {
      console.error("[updateUserSession] selectError:", selectError)
      return
    }

    if (!existing) {
      // no row => insert
      const { error: insertError } = await supabase
        .from("user_sessions")
        .insert([{ user_id: userId, views_count: 1 }])

      if (insertError) {
        console.error("[updateUserSession] insertError:", insertError)
      } else {
        console.log(`[updateUserSession] inserted new row for user_id=${userId}`)
      }
      return
    }

    // else we increment
    const newViews = (existing.views_count ?? 0) + 1
    const { error: updateError } = await supabase
      .from("user_sessions")
      .update({ views_count: newViews })
      .eq("id", existing.id)

    if (updateError) {
      console.error("[updateUserSession] updateError:", updateError)
    } else {
      console.log(`[updateUserSession] updated user_id=${userId} to views_count=${newViews}`)
    }
  } catch (err) {
    console.error("[updateUserSession] unhandled exception:", err)
  }
}
</file>

<file path="src/lib/useGateDays.ts ">
/* src/lib/useGateDays.ts */
import { useEffect, useState } from "react";

export function useGateDays(): number {
  const [gate, setGate] = useState(0);
  useEffect(() => {
    if (typeof window === "undefined") return;
    setGate(Number(localStorage.getItem("fss_gate") ?? "0"));
  }, []);
  return gate;
}
</file>

<file path="src/lib/utils.ts">
// src/lib/utils.ts
import { clsx, ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

/**
 * Utility function to merge class names conditionally.
 * Combines Tailwind classes and removes duplicates.
 */
export function cn(...classes: ClassValue[]) {
  return twMerge(clsx(classes))
}
</file>

<file path="src/types/global.d.ts">
// src/types/global.d.ts

// Define possible payload structures
type DatafastSimplePayload = Record<string, string | number | boolean | null | undefined>;

type DatafastEventPayload = {
  name: string;
  properties?: DatafastSimplePayload; // Allow nested properties object
};

// Extend the global Window interface
interface Window {
  datafast?: (
    action: string,
    // Use a union type to allow different valid payload structures
    payload?: DatafastSimplePayload | DatafastEventPayload
  ) => void;
}

// Make sure this file is included in your tsconfig.json "include" array:
// "include": [ ..., "src/types/global.d.ts" ]
</file>

<file path="supabase/functions/send-recover-email/index.ts">
// supabase/functions/send-recovery-email/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
// Consider pinning Stripe version for Deno if needed: e.g., stripe@11.1.0?target=deno&no-check
import Stripe from 'https://esm.sh/stripe?target=deno&no-check'
import sgMail from 'https://esm.sh/@sendgrid/mail@7.7.0'
import { createClient, SupabaseClient } from 'https://esm.sh/@supabase/supabase-js@2'

// --- Configuration ---
const STRIPE_SECRET_KEY = Deno.env.get('STRIPE_SECRET_KEY')!
const SENDGRID_API_KEY = Deno.env.get('SENDGRID_API_KEY')!
const SERVICE_ROLE_KEY = Deno.env.get('SERVICE_ROLE_KEY')!
const SUPABASE_URL = Deno.env.get('NEXT_PUBLIC_SUPABASE_URL')!

// Check if essential environment variables are loaded
if (!STRIPE_SECRET_KEY || !SENDGRID_API_KEY || !SERVICE_ROLE_KEY || !SUPABASE_URL) {
  console.error("CRITICAL ERROR: Missing required environment variables (Stripe SK, SendGrid Key, Service Role Key, Supabase URL). Function cannot operate.")
  // Consider throwing an error to prevent initialization if secrets are missing
  // throw new Error("Missing required environment variables.");
}

let stripe: Stripe | null = null;
try {
    stripe = new Stripe(STRIPE_SECRET_KEY, {
      httpClient: Stripe.createFetchHttpClient(), // Required for Deno compatibility
      // Use the API version required by the installed/imported Stripe library
      apiVersion: '2025-02-24.acacia',
    })
} catch(e) {
    console.error("Failed to initialize Stripe:", e);
    // Handle initialization failure - maybe the function should exit?
}


try {
    sgMail.setApiKey(SENDGRID_API_KEY)
} catch(e) {
    console.error("Failed to set SendGrid API key:", e);
     // Handle initialization failure
}

const SENDGRID_FROM_EMAIL = 'support@firstserveseattle.com' // Your verified SendGrid sender email

// Verify these IDs are correct in your Stripe account
const MONTHLY_PRICE_ID = 'price_1Qbm96KSaqiJUYkj7SWySbjU'
const RECOVERY_COUPON_ID = 'zctzOBTE' // 75% off coupon

const SUCCESS_URL = 'https://www.firstserveseattle.com/members' // Redirect on successful payment
const CANCEL_URL = 'https://www.firstserveseattle.com/'     // Redirect if checkout is cancelled

let supabaseAdmin: SupabaseClient | null = null;
try {
    supabaseAdmin = createClient(SUPABASE_URL, SERVICE_ROLE_KEY, {
      auth: {
        // Recommended settings for server-side/admin clients
        autoRefreshToken: false,
        persistSession: false
      }
    });
} catch(e) {
    console.error("Failed to initialize Supabase Admin Client:", e);
     // Handle initialization failure
}


console.log('Function "send-recovery-email" initialization attempted.');

serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: {
        'Access-Control-Allow-Origin': '*', // Adjust for production if needed
        'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
    } })
  }
  // Only allow POST method for actual execution
  if (req.method !== 'POST') {
    console.warn(`Received non-POST request: ${req.method}`);
    return new Response(JSON.stringify({ error: 'Method Not Allowed' }), {
      status: 405, headers: { 'Content-Type': 'application/json' },
    })
  }

  // Check if clients initialized correctly before proceeding
  if (!stripe || !supabaseAdmin) {
      console.error("Aborting: Stripe or Supabase client not initialized.");
      return new Response(JSON.stringify({ error: 'Internal Server Configuration Error' }), {
        status: 500, headers: { 'Content-Type': 'application/json' },
      });
  }


  try {
    // Safely parse JSON body
    let payload;
    try {
        payload = await req.json();
    } catch (e) {
        console.error("Failed to parse request body:", e);
        return new Response(JSON.stringify({ error: 'Invalid request body' }), {
            status: 400, headers: { 'Content-Type': 'application/json' },
        });
    }

    const { userId, email, fullName } = payload;
    console.log(`Processing recovery email request for: ${email} (User ID: ${userId})`);

    if (!userId || !email) {
      console.error('Validation Error: Missing userId or email in request payload');
      return new Response(JSON.stringify({ error: 'Missing required user information (userId or email)' }), {
        status: 400, headers: { 'Content-Type': 'application/json' },
      })
    }

    // --- Create a new Stripe Checkout Session with the 75% discount ---
    let session;
    try {
        session = await stripe.checkout.sessions.create({
          line_items: [{ price: MONTHLY_PRICE_ID, quantity: 1 }],
          mode: 'subscription',
          success_url: SUCCESS_URL,
          cancel_url: CANCEL_URL,
          customer_email: email, // Pre-fill customer email
          discounts: [{ coupon: RECOVERY_COUPON_ID }], // Apply the 75% off coupon
          allow_promotion_codes: false, // Prevent stacking other codes
          metadata: {
            userId: userId, // Link Stripe session back to your internal user ID
            recoveryFlow: 'true', // Flag this as a recovery session
          },
        });
    } catch (stripeError) {
        console.error(`Stripe checkout session creation failed for ${email}:`, stripeError);
        throw new Error(`Stripe API error: ${stripeError.message || 'Failed to create session'}`);
    }


    if (!session?.url) {
      console.error(`Stripe session created but URL is missing for ${email}`);
      throw new Error('Failed to retrieve Stripe checkout session URL after creation.');
    }
    const checkoutUrl = session.url;
    console.log(`Stripe Checkout URL created successfully for ${email}`);

    // --- Send Email via SendGrid ---
    const emailSubject = "Still thinking about First Serve Seattle? Here's 75% off!";
    // Using template literals for easier multiline HTML
    const emailHtml = `
      <p>Hi ${fullName || 'there'},</p>
      <p>We noticed you started signing up for First Serve Seattle but didn't get a chance to finish.</p>
      <p>Stop guessing if courts are free and start playing more tennis (or pickleball)! First Serve Seattle gives you today's availability for public courts across the city.</p>
      <p>To make it easier to get started, here's a special offer: **Get 75% off your first month!**</p>
      <p>Click below to complete your subscription with the discount applied:</p>
      <p><a href="${checkoutUrl}" style="background-color: #0c372b; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; display: inline-block;">Complete Subscription (75% Off First Month)</a></p>
      <p>This link is unique to you and includes the discount.</p>
      <p>See you on the courts!</p>
      <p>The First Serve Seattle Team</p>
      <p><small>If you've already subscribed or aren't interested, please ignore this email. Coupon applies to the first month of the monthly plan only.</small></p>
    `;

    const msg = {
      to: email,
      from: SENDGRID_FROM_EMAIL,
      subject: emailSubject,
      html: emailHtml,
    };

    console.log(`Attempting to send recovery email via SendGrid to ${email}`);
    try {
        await sgMail.send(msg);
        console.log(`Recovery email successfully sent to ${email}`);
    } catch (sendgridError) {
        console.error(`SendGrid failed to send email to ${email}:`, sendgridError?.response?.body || sendgridError);
        // Decide if you should still attempt the DB update or throw
        throw new Error(`SendGrid error: ${sendgridError.message || 'Failed to send email'}`);
    }


    // --- Update subscriber record to prevent re-sending ---
    // This runs even if SendGrid failed in the above block unless an error was thrown
    console.log(`Attempting to update recovery_email_sent flag for user ID: ${userId}`);
    const { error: updateError } = await supabaseAdmin
      .from('subscribers')
      .update({ recovery_email_sent: true })
      .eq('id', userId); // Match the user ID

    if (updateError) {
      // Log the error but don't necessarily fail the whole function response
      // The email might have sent, failing here is less critical than failing the send
      console.error(`DATABASE UPDATE FAILED for recovery_email_sent flag for user ${userId}:`, updateError.message);
    } else {
      console.log(`Successfully marked recovery_email_sent=true for user ${userId}`);
    }

    // Return success response to the invoking database function
    return new Response(JSON.stringify({ success: true, message: `Recovery email processed for ${email}` }), {
      status: 200, headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    // Catch errors from Stripe, SendGrid, or DB update attempts
    console.error('Unhandled error in send-recovery-email function:', error);
    const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';
    // Return a generic server error response
    return new Response(JSON.stringify({ error: 'An internal error occurred while processing the request.' }), {
      status: 500, headers: { 'Content-Type': 'application/json' },
    });
  }
})
</file>

<file path="ui/package.json">
{
  "name": "ui",
  "version": "0.1.0",
  "private": true,
  "license": "MIT",
  "type": "module",
  "dependencies": {
    "lucide-react": "^0.469.0",
    "@radix-ui/react-icons": "^1.3.2",
    "clsx": "^1.2.1",
    "tailwind-merge": "^2.6.0",
    "class-variance-authority": "^0.7.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "eslint": "^9.0.0",
    "eslint-config-next": "15.1.3",
    "tailwindcss": "^3.4.1",
    "postcss": "^8.0.0",
    "autoprefixer": "^10.0.0",
    "tailwindcss-animate": "^1.0.7"
  }
}
</file>

<file path="ui/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="ui/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: "#0c372b", // Customize as needed
        secondary: "#1a202c",
        foreground: "#ffffff",
        "primary-foreground": "#ffffff",
        "secondary-foreground": "#ffffff",
        "muted-foreground": "#a0aec0",
        ring: "#3182ce",
        input: "#e2e8f0",
        background: "#ffffff",
        popover: "#f7fafc",
        card: "#ffffff",
        "card-foreground": "#1a202c",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
  ],
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
.env.local

# ignore ui dependencies
ui/node_modules/
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="pnpm-workspace.yaml">
packages:
  - "ui"
  - "www"
  - "apps/*"
  - "packages/*"
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="qr_manifest.csv">
"slug","file","copies"
"alki-playfield-tennis","alki-playfield-tennis.png",2
"aytc-outdoor-tennis","aytc-outdoor-tennis.png",6
"beacon-hill-playfield-tennis","beacon-hill-playfield-tennis.png",2
"bitter-lake-playfield-tennis","bitter-lake-playfield-tennis.png",4
"brighton-playfield-tennis","brighton-playfield-tennis.png",2
"bryant-playground-tennis","bryant-playground-tennis.png",2
"david-rodgers-park-tennis","david-rodgers-park-tennis.png",3
"dearborn-park-tennis","dearborn-park-tennis.png",2
"delridge-playfield-tennis","delridge-playfield-tennis.png",2
"discovery-park-tennis","discovery-park-tennis.png",2
"froula-playground-tennis","froula-playground-tennis.png",2
"garfield-playfield-tennis","garfield-playfield-tennis.png",2
"gilman-playfield-tennis","gilman-playfield-tennis.png",2
"green-lake-park-west-tennis","green-lake-park-west-tennis.png",2
"hiawatha-playfield-tennis","hiawatha-playfield-tennis.png",3
"jefferson-park-lid-tennis-court","jefferson-park-lid-tennis-court.png",4
"laurelhurst-playfield-tennis","laurelhurst-playfield-tennis.png",4
"lower-woodland-playfield","lower-woodland-playfield.png",10
"lower-woodland-playfield-upper-courts","lower-woodland-playfield-upper-courts.png",4
"madison-park-tennis","madison-park-tennis.png",2
"madrona-playground-tennis","madrona-playground-tennis.png",2
"magnolia-park-tennis","magnolia-park-tennis.png",2
"magnolia-playfield-tennis","magnolia-playfield-tennis.png",4
"meadowbrook-playfield-tennis","meadowbrook-playfield-tennis.png",1
"miller-playfield-tennis","miller-playfield-tennis.png",2
"montlake-playfield-tennis","montlake-playfield-tennis.png",2
"mount-baker-park-tennis","mount-baker-park-tennis.png",2
"observatory-tennis","observatory-tennis.png",2
"rainier-beach-playfield-tennis","rainier-beach-playfield-tennis.png",4
"rainier-playfield-tennis","rainier-playfield-tennis.png",4
"riverview-playfield-tennis","riverview-playfield-tennis.png",2
"rogers-playfield-tennis","rogers-playfield-tennis.png",2
"sam-smith-i90-lid-park-tennis","sam-smith-i90-lid-park-tennis.png",2
"seward-park-tennis","seward-park-tennis.png",2
"solstice-park-tennis","solstice-park-tennis.png",6
"soundview-playfield-tennis","soundview-playfield-tennis.png",2
"volunteer-park-court-01-","volunteer-park-court-01-.png",4
"wallingford-playfield-tennis","wallingford-playfield-tennis.png",2
"walt-hundley-playfield-tennis","walt-hundley-playfield-tennis.png",2
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

If you need to work on the component library in `ui`, run `npm install` from the
`ui` directory to install its packages before building or testing.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss"

// FULL REWRITE:
const config: Config = {
  // Make sure we include "src/app/**/*" so that Tailwind picks up classes in src/app/components/ui
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
}

// Export default for Next.js ESM usage
export default config
</file>

<file path="tsconfig.json">
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler", // Or "node", check what you have
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".", // Sets the base for path resolution to the root
    "paths": {
      // Corrected: Point @/components/* to the src/app/components/ directory
      "@/components/*": ["src/app/components/*"],
      // Keep other aliases pointing inside src/ if that's where those files are
      "@/lib/*": ["src/lib/*"],
      // Assuming hooks would be in src/hooks if you add them
      "@/hooks/*": ["src/hooks/*"],
      "@/app/*": ["src/app/*"], // For things directly in src/app
      "@/types/*": ["src/types/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "src/types/global.d.ts" // Ensure your type declaration is included
    ],
  "exclude": [
    "node_modules",
    "supabase/functions", // Exclude Supabase edge functions
    // Add "app" here if the root app directory is truly unused now
    "app" // Assuming the root app/ directory is no longer needed
  ]
}
</file>

<file path="vercel.json">
{
  "installCommand": "pnpm install --no-frozen-lockfile"
}
</file>

<file path=".cursor/rules/posthog-integration.mdc">
---
description: apply when interacting with PostHog/analytics tasks
globs: 
alwaysApply: true
---

Never hallucinate an API key. Instead, always use the API key populated in the .env file.

# Feature flags

A given feature flag should be used in as few places as possible. Do not increase the risk of undefined behavior by scattering the same feature flag across multiple areas of code. If the same feature flag needs to be introduced at multiple callsites, flag this for the developer to inspect carefully.

If a job requires creating new feature flag names, make them as clear and descriptive as possible.

If using TypeScript, use an enum to store flag names. If using JavaScript, store flag names as strings to an object declared as a constant, to simulate an enum. Use a consistent naming convention for this storage. enum/const object members should be written UPPERCASE_WITH_UNDERSCORE.

Gate flag-dependent code on a check that verifies the flag's values are valid and expected.

# Custom properties

If a custom property for a person or event is at any point referenced in two or more files or two or more callsites in the same file, use an enum or const object, as above in feature flags.

# Naming

Before creating any new event or property names, consult with the developer for any existing naming convention. Consistency in naming is essential, and additional context may exist outside this project. Similarly, be careful about any changes to existing event and property names, as this may break reporting and distort data for the project.
</file>

<file path=".github/workflows/mail-missing-cards.yml">
name: Mail add-card reminders

on:
  # 17:30 UTC = 10:30 AM PDT / 9:30 AM PST
  schedule:
    - cron: '30 17 * * *'

jobs:
  mail:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with: { version: 9 }

      - run: pnpm install --frozen-lockfile

      - name: Send reminder e-mails
        run: pnpm mail-missing-cards
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE }} # "true" or "false"
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
</file>

<file path="scripts/backfillStripeIds.ts">
/* Strict-mode Node script: back-fills any missing stripe ids.
 *
 *   • Finds rows where subscription id OR customer id is NULL
 *   • Uses Stripe search by e-mail when both are missing
 *   • Uses subscription → customer when subscription id exists
 *   • Updates the row with both ids (UPSERT by primary key)
 *
 * Usage (one-off):
 *   STRIPE_SECRET_KEY=sk_live_… \
 *   DATABASE_URL=postgres://user:pass@host:5432/db \
 *   pnpm ts-node --transpile-only scripts/backfillStripeIds.ts
 */

import Stripe from 'stripe';
import { Pool } from 'pg';
import { z } from 'zod';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-01-27.acacia' as Stripe.LatestApiVersion,
});

const db = new Pool({ connectionString: process.env.DATABASE_URL });

const row = z.object({
  id:                     z.string().uuid(),
  email:                  z.string().email(),
  stripe_subscription_id: z.string().nullable(),
  stripe_customer_id:     z.string().nullable(),
});
type Row = z.infer<typeof row>;

async function main() {
  const { rows } = await db.query<Row>(`
    SELECT id, email, stripe_subscription_id, stripe_customer_id
    FROM   public.subscribers
    WHERE  stripe_customer_id IS NULL
       OR  stripe_subscription_id IS NULL
  `);

  console.info(`Need to back-fill ${rows.length} row(s).`);

  for (const r of rows) {
    try {
      let custId  = r.stripe_customer_id ?? null;
      let subId   = r.stripe_subscription_id ?? null;

      // Case 1 – we have subscription id, missing customer id
      if (subId && !custId) {
        const sub = await stripe.subscriptions.retrieve(subId);
        custId    = sub.customer as string;
      }

      // Case 2 – we have neither id
      if (!custId && !subId) {
        const search = await stripe.customers.search({
          query: `email:"${r.email}"`,
          limit: 1,
        });
        if (search.data.length === 0) {
          console.warn(`No Stripe customer for ${r.email}, skip.`);
          continue;
        }
        custId = search.data[0].id;

        const subs = await stripe.subscriptions.list({
          customer: custId,
          limit: 1,
        });
        if (subs.data.length === 0) {
          console.warn(`No subscription for ${r.email}, skip.`);
          continue;
        }
        subId  = subs.data[0].id;
      }

      if (!custId || !subId) {
        console.warn(`Could not determine both ids for ${r.email}, skip.`);
        continue;
      }

      await db.query(
        `UPDATE public.subscribers
            SET stripe_customer_id     = $1,
                stripe_subscription_id = $2,
                updated_at             = NOW()
          WHERE id = $3`,
        [custId, subId, r.id],
      );
      console.info(`✓ ${r.email}  →  cust=${custId}  sub=${subId}`);
    } catch (err) {
      console.error(`✗ ${r.email}`, (err as Error).message);
    }
  }

  await db.end();
}

main().catch((e) => {
  console.error('fatal', e);
  process.exit(1);
});
</file>

<file path="src/app/admin/layout.tsx">
'use client';

import { useEffect, useState } from 'react';

interface AdminLayoutProps {
  children: React.ReactNode;
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [password, setPassword] = useState('');

  useEffect(() => {
    // Check if already authenticated
    const adminAuth = localStorage.getItem('admin_auth');
    if (adminAuth === 'true') {
      setIsAuthenticated(true);
    }
    setIsLoading(false);
  }, []);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    // Simple password check - in production, use proper auth
    if (password === 'admin123' || password === 'firstserve2024') {
      localStorage.setItem('admin_auth', 'true');
      setIsAuthenticated(true);
    } else {
      alert('Invalid password');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('admin_auth');
    setIsAuthenticated(false);
    setPassword('');
  };

  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-pulse text-lg">Loading...</div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-100">
        <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
          <h1 className="text-2xl font-bold text-center mb-6">Admin Login</h1>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Login
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-lg font-semibold">First Serve Admin</h1>
            </div>
            <div className="flex items-center">
              <button
                onClick={handleLogout}
                className="text-gray-500 hover:text-gray-700 px-3 py-2 rounded-md text-sm font-medium"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>
      <main>{children}</main>
    </div>
  );
}
</file>

<file path="src/app/api/checkout-session/route.ts">
import { NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-01-27.acacia' as Stripe.LatestApiVersion,
});

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('session_id');
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Missing session_id parameter' },
        { status: 400 }
      );
    }
    
    const session = await stripe.checkout.sessions.retrieve(sessionId);
    
    const email = session.customer_details?.email || session.customer_email;
    
    if (!email) {
      return NextResponse.json(
        { error: 'No email found in session' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ email });
  } catch (error) {
    console.error('Error fetching checkout session:', error);
    return NextResponse.json(
      { error: 'Failed to fetch session details' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/create-portal-link/route.ts">
/* src/app/api/create-portal-link/route.ts */
import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";
import { createClient } from "@supabase/supabase-js";

// Use the API version required by the installed Stripe library
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-02-24.acacia', // <<<< ENSURE THIS VERSION IS SAVED
});

// Ensure Supabase Admin client uses appropriate keys from environment variables
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // Ensure this env var is set in Vercel
);

export async function POST(req: NextRequest) {
  try {
    // 1. Authenticate the user via Authorization header
    const accessToken = req.headers.get("Authorization")?.replace("Bearer ", "");
    if (!accessToken) {
      console.error("Create Portal Link Error: No token provided");
      return NextResponse.json({ error: "Authentication required." }, { status: 401 });
    }

    // Validate the session and get user details using the admin client
    const { data: { user }, error: sessionError } = await supabaseAdmin.auth.getUser(accessToken);

    if (sessionError || !user) {
      console.error("Create Portal Link Error: Invalid session.", sessionError);
      // Avoid leaking detailed error messages in production responses
      return NextResponse.json({ error: "Invalid session or user not found." }, { status: 401 });
    }

    // Log the user ID being processed
    console.log(`Create Portal Link: Processing request for user ID: ${user.id}`);


    // --- Logic to get Stripe Customer ID (Using Subscription ID lookup) ---
    const { data: subscriberData, error: subIdError } = await supabaseAdmin
       .from("subscribers")
       .select("stripe_subscription_id") // Fetch subscription ID
       .eq("email", user.email) // Match logged-in user's email
       .maybeSingle(); // Use maybeSingle in case user exists but has no subscription ID yet

    // Handle case where user has no subscription ID in your DB
    if (subIdError || !subscriberData?.stripe_subscription_id) {
       console.error(`Create Portal Link Error: No subscription ID found for user ${user.email}:`, subIdError);
       // It's possible the user exists but doesn't have an active/recorded subscription
       return NextResponse.json({ error: "Active subscription information not found." }, { status: 404 });
    }
    const subscriptionId = subscriberData.stripe_subscription_id;
    console.log(`Create Portal Link: Found subscription ID ${subscriptionId} for user ${user.email}`);

    // Fetch the subscription from Stripe to get the customer ID
    let customerId: string | null = null;
    try {
        const subscription = await stripe.subscriptions.retrieve(subscriptionId);
        // Handle case where subscription might exist but has no customer attached (unlikely but possible)
        if (!subscription.customer) {
            console.error(`Create Portal Link Error: No customer ID attached to subscription ${subscriptionId}`);
            throw new Error("No customer ID attached to subscription.");
        }
        customerId = subscription.customer as string; // Assuming customer is always a string ID here
        console.log(`Create Portal Link: Retrieved customer ID ${customerId} from subscription ${subscriptionId}`);
    } catch (stripeError) {
        console.error(`Create Portal Link Error: Failed to retrieve subscription ${subscriptionId} from Stripe:`, stripeError);
        // Handle cases like subscription not found in Stripe, network errors etc.
        return NextResponse.json({ error: "Could not retrieve subscription details from payment provider." }, { status: 500 });
    }
    // --- End of Customer ID Logic ---


    // 3. Create a Billing Portal Session
    if (!customerId) {
         // This check is redundant if error handling above is correct, but added for safety
         console.error(`Create Portal Link Error: Customer ID is null or undefined before creating portal session for user ${user.email}`);
         return NextResponse.json({ error: "Could not determine customer details." }, { status: 500 });
    }

    console.log(`Create Portal Link: Creating portal session for customer ID: ${customerId}`);
    const portalSession = await stripe.billingPortal.sessions.create({
      customer: customerId,
      return_url: "https://firstserveseattle.com/members", // Ensure this URL matches your site and Stripe settings
    });
    console.log(`Create Portal Link: Portal session created successfully for customer ID: ${customerId}`);

    // 4. Return the portal URL to the client
    return NextResponse.json({ url: portalSession.url });

  } catch (err: unknown) {
    console.error("Create Portal Link Error: Unhandled exception:", err);
    // Avoid sending detailed internal errors to the client
    return NextResponse.json({ error: "An error occurred while creating the customer portal link." }, { status: 500 });
  }
}
</file>

<file path="src/app/api/create-subscriber/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(req: NextRequest) {
  try {
    const { userId, email, fullName, plan } = await req.json();

    const { data, error } = await supabase
      .from('subscribers')
      .upsert(
        {
          id: userId,
          email,
          full_name: fullName,
          plan,
          status: 'pending',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        },
        { onConflict: 'email' }
      );

    if (error) {
      console.error('❌ Supabase error:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json({ success: true, data });
  } catch (err) {
    console.error('❌ API error:', err);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
</file>

<file path="src/app/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/app/components/AuthWrapper.tsx">
"use client";

import { useEffect, useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

interface AuthWrapperProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export default function AuthWrapper({ children, fallback }: AuthWrapperProps) {
  const [isLoading, setIsLoading] = useState(true);
  const supabase = createClientComponentClient();

  useEffect(() => {
    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('🔄 Auth state change:', event, session?.user?.email);
      
      // Mark as not loading once we get any auth event
      setIsLoading(false);
    });

    // Check initial session
    supabase.auth.getSession().then(() => {
      setIsLoading(false);
    });

    return () => subscription.unsubscribe();
  }, [supabase.auth]);

  if (isLoading) {
    return (
      fallback || (
        <div className="flex items-center justify-center min-h-screen bg-gray-50">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading...</p>
          </div>
        </div>
      )
    );
  }

  return <>{children}</>;
}
</file>

<file path="src/components/PostHogProvider.tsx">
"use client"

import posthog from "posthog-js"
import { PostHogProvider as PHProvider } from "posthog-js/react"
import { useEffect } from "react"

export function PostHogProvider({ children }: { children: React.ReactNode }) {
  useEffect(() => {
    posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY!, {
      api_host: "/ingest",
      ui_host: "https://us.posthog.com",
      defaults: '2025-05-24',
      capture_exceptions: true,
      debug: process.env.NODE_ENV === "development",
    })
  }, [])

  return <PHProvider client={posthog}>{children}</PHProvider>
}
</file>

<file path="src/components/SiteFooter.tsx">
// src/components/SiteFooter.tsx
'use client'

import Link from 'next/link'

export default function SiteFooter() {
  return (
    <footer className="border-t py-8 text-center text-xs text-gray-400">
      <nav
        aria-label="Footer navigation"
        className="mb-4 flex flex-wrap justify-center gap-x-4 gap-y-2 text-sm text-gray-700"
      >
        <Link href="/privacy-policy" className="underline hover:text-gray-500">
          Privacy Policy
        </Link>
        <span aria-hidden="true">|</span>

        <Link href="/terms-of-service" className="underline hover:text-gray-500">
          Terms of Service
        </Link>
        <span aria-hidden="true">|</span>

        <Link href="/faq" className="underline hover:text-gray-500">
          FAQ
        </Link>
        <span aria-hidden="true">|</span>

        <Link href="/contact" className="underline hover:text-gray-500">
          Contact
        </Link>
        <span aria-hidden="true">|</span>

        <Link href="/login" className="underline hover:text-gray-500">
          Sign In
        </Link>
        <span aria-hidden="true">|</span>

        <Link href="/signup" className="underline hover:text-gray-500">
          Sign Up
        </Link>
      </nav>

      <p className="mb-1">
        First&nbsp;Serve&nbsp;Seattle is an independent community resource and
        is not associated with Seattle Parks&nbsp;&amp;&nbsp;Recreation.
      </p>
      <p>&copy; {new Date().getFullYear()} Simple Apps LLC.</p>
    </footer>
  )
}
</file>

<file path="src/lib/createBillingPortal.ts">
/* src/lib/createBillingPortal.ts
 * Server-only Stripe helper to create a billing-portal session.
 */
'use server';

import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-01-27.acacia' as Stripe.LatestApiVersion,
});

/**
 * Returns a one-time billing-portal URL for the current logged-in user.
 * Throws 401 if not signed in or customer not linked.
 */
export async function createBillingPortal(
  supabaseAccessToken: string | undefined,
): Promise<string> {
  if (!supabaseAccessToken) throw new Error('401');

  // Server-side Supabase client with service role
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    { global: { headers: { Authorization: `Bearer ${supabaseAccessToken}` } } },
  );

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) throw new Error('401');

  // Fetch stripe_customer_id from your subscribers table
  const { data, error } = await supabase
    .from('subscribers')
    .select('stripe_customer_id')
    .eq('email', user.email)
    .single();

  if (error || !data?.stripe_customer_id) throw new Error('No Stripe customer');

  const session = await stripe.billingPortal.sessions.create({
    customer: data.stripe_customer_id,
    return_url: `${process.env.NEXT_PUBLIC_SITE_URL}/members`, // redirect back to members area
  });

  return session.url;
}
</file>

<file path="src/lib/initLocalStorage.ts">
// src/lib/initLocalStorage.ts
// Runs once, early on the client.
// - Bumps schema version
// - Validates / repairs every key used by First Serve Seattle
/* -------------------------------------------------------------------------- */

// Increment this version number when ANY localStorage key's expected structure
// or meaning changes in a way that might break older clients.
const SCHEMA_VERSION = 3; // <-- Increment to 3 (from 2) to force a full reset/repair

type Repairs = {
  key: string;
  reason: string;
  valueAtTimeOfRepair?: string | null; // Added for more debug info
};

export function initLocalStorage(): void {
  if (typeof window === 'undefined') return; // SSR guard

  const currentSchemaVersion = Number(localStorage.getItem('fss_schema_ver') ?? '0');
  const repairs: Repairs[] = [];
  let repairPerformed = false;

  // If schema version is outdated or invalid, perform aggressive cleanup
  if (currentSchemaVersion < SCHEMA_VERSION || isNaN(currentSchemaVersion)) {
    console.warn(`[storage-repair] Schema mismatch: current ${currentSchemaVersion}, expected ${SCHEMA_VERSION}. Performing full reset of FSS keys.`);
    
    // List all FSS-related keys to clear (PRESERVE paywall data)
    const keysToClear = ['abGroup', 'userId', 'visitorId', 'visitNumber', 'stripeCustomerId'];
    
    keysToClear.forEach(key => {
        const oldValue = localStorage.getItem(key);
        if (oldValue !== null) {
            repairs.push({ key, reason: `Schema upgrade from v${currentSchemaVersion} to v${SCHEMA_VERSION}`, valueAtTimeOfRepair: oldValue });
            localStorage.removeItem(key);
            repairPerformed = true;
        }
    });

    // userId, visitorId, visitNumber, abGroup will be re-initialized by ClientIdsInit
    // fss_gate will be re-assigned by shouldShowPaywall if missing.
  }

  /* ---------- helpers -------------------------------------------------- */
  const safeJSON = <T>(key: string, fallback: T, validator?: (v: T) => boolean): T => {
    try {
      const raw = localStorage.getItem(key);
      if (raw === null) return fallback;
      const parsed = JSON.parse(raw) as T;
      if (validator && !validator(parsed)) {
        throw new Error('validation failed');
      }
      return parsed;
    } catch (e) {
      const oldValue = localStorage.getItem(key);
      repairs.push({ key, reason: `corrupt JSON or invalid structure: ${e instanceof Error ? e.message : String(e)}`, valueAtTimeOfRepair: oldValue });
      localStorage.removeItem(key); // Clear bad key
      repairPerformed = true;
      return fallback;
    }
  };

  /* ---------- validate / re-initialize FSS keys if not already cleared by schema bump -------------------------- */
  // 1. fss_days → must be string[]
  // This will be empty after a schema bump, and that's okay.
  const days = safeJSON<string[]>('fss_days', [], (a) => Array.isArray(a) && a.every((s) => typeof s === 'string'));
  localStorage.setItem('fss_days', JSON.stringify(days)); // Ensure it's a valid empty array if cleared

  // 2. fss_gate → must be "3" | "5" | "7"
  // This will be null after a schema bump, and `shouldShowPaywall` will re-assign.
  const gateRaw = localStorage.getItem('fss_gate');
  if (gateRaw !== null && !['3', '5', '7'].includes(gateRaw)) { // Only if exists and is bad
    repairs.push({ key: 'fss_gate', reason: 'unexpected value' });
    localStorage.removeItem('fss_gate');
    repairPerformed = true;
  }

  // 3. abGroup → optional but must be "A" | "B"
  // This will be null after a schema bump, and `ClientIdsInit` will re-assign.
  const ab = localStorage.getItem('abGroup');
  if (ab !== null && !['A', 'B'].includes(ab)) { // Only if exists and is bad
    repairs.push({ key: 'abGroup', reason: 'unexpected value' });
    localStorage.removeItem('abGroup');
    repairPerformed = true;
  }
  
  // No explicit validation needed for userId, visitorId, visitNumber here
  // as ClientIdsInit handles their creation/presence.

  /* ---------- stamp new schema version if repairs were performed or version updated --------------------------------- */
  if (repairPerformed || currentSchemaVersion < SCHEMA_VERSION) {
    localStorage.setItem('fss_schema_ver', String(SCHEMA_VERSION));
    console.log(`[storage-repair] LocalStorage schema version updated to ${SCHEMA_VERSION}.`);
  }

  /* ---------- optional: telemetry -------------------------------------- */
  if (repairs.length) {
    console.warn('[storage-repair]', repairs);
    // fire-and-forget log
    fetch('/api/log-event', {
      method : 'POST',
      headers: { 'Content-Type': 'application/json' },
      body   : JSON.stringify({
        event    : 'local_storage_repair_details', // Use a new event name for details
        metadata : { repairs, newSchemaVersion: SCHEMA_VERSION, oldSchemaVersion: currentSchemaVersion },
      }),
    }).catch((e) => console.error("Failed to log storage repair event:", e));
  }
}
</file>

<file path="src/lib/neighborhoodMapping.ts">
// Neighborhood mapping for tennis courts
// Allows users to search by neighborhood name to find relevant courts

export const COURT_NEIGHBORHOODS: Record<string, string[]> = {
  "Alki Playfield Tennis": ["Admiral", "Alki", "West Seattle"],
  "Aytc Outdoor Tennis": ["Mount Baker"],
  "Beacon Hill Playfield Tennis": ["Beacon Hill"],
  "Bitter Lake Playfield Tennis": ["Bitter Lake"],
  "Brighton Playfield Tennis": ["Hillman City", "Brighton", "Rainier Valley"],
  "Bryant Playground Tennis": ["Bryant", "Ravenna"],
  "David Rodgers Park Tennis": ["Queen Anne"],
  "Dearborn Park Tennis": ["North Beacon Hill", "Beacon Hill"],
  "Delridge Playfield Tennis": ["Delridge", "Cottage Grove", "West Seattle"],
  "Discovery Park Tennis": ["Magnolia"],
  "Froula Playground Tennis": ["Roosevelt", "Ravenna"],
  "Garfield Playfield Tennis": ["Central District", "Cherry Hill"],
  "Gilman Playfield Tennis": ["Ballard", "West Woodland"],
  "Green Lake Park West Tennis": ["Green Lake"],
  "Hiawatha Playfield Tennis": ["Admiral", "West Seattle"],
  "Jefferson Park Lid Tennis Court": ["Beacon Hill"],
  "Laurelhurst Playfield Tennis": ["Laurelhurst"],
  "Lower Woodland Playfield": ["Green Lake", "Wallingford"],
  "Lower Woodland Playfield Upper Courts": ["Wallingford", "Green Lake"],
  "Madison Park Tennis": ["Madison Park"],
  "Madrona Playground Tennis": ["Madrona"],
  "Magnolia Park Tennis": ["Magnolia"],
  "Magnolia Playfield Tennis": ["Magnolia"],
  "Meadowbrook Playfield Tennis": ["Meadowbrook", "Lake City"],
  "Miller Playfield Tennis": ["Capitol Hill", "Miller Park"],
  "Montlake Playfield Tennis": ["Montlake"],
  "Mount Baker Park Tennis": ["Mount Baker"],
  "Observatory Tennis": ["Queen Anne"],
  "Rainier Beach Playfield Tennis": ["Rainier Beach"],
  "Rainier Playfield Tennis": ["Columbia City", "Rainier Valley"],
  "Riverview Playfield Tennis": ["Riverview", "West Seattle"],
  "Rogers Playfield Tennis": ["Eastlake"],
  "Sam Smith (I-90 Lid) Park Tennis": ["Atlantic", "Central District", "Judkins Park"],
  "Seward Park Tennis": ["Seward Park"],
  "Solstice Park Tennis": ["Fauntleroy", "West Seattle"],
  "Soundview Playfield Tennis": ["Crown Hill"],
  "Volunteer Park Court 01": ["Capitol Hill"],
  "Wallingford Playfield Tennis": ["Wallingford"],
  "Walt Hundley Playfield Tennis": ["High Point", "West Seattle"]
};

/**
 * Get neighborhoods for a court by title
 */
export function getNeighborhoodsForCourt(courtTitle: string): string[] {
  return COURT_NEIGHBORHOODS[courtTitle] || [];
}

/**
 * Check if a court matches a search term by neighborhood
 */
export function courtMatchesNeighborhood(courtTitle: string, searchTerm: string): boolean {
  const neighborhoods = getNeighborhoodsForCourt(courtTitle);
  const searchLower = searchTerm.toLowerCase();
  
  return neighborhoods.some(neighborhood => 
    neighborhood.toLowerCase().includes(searchLower)
  );
}

/**
 * Enhanced search that matches both court title and neighborhoods
 */
export function courtMatchesSearch(courtTitle: string, searchTerm: string): boolean {
  if (!searchTerm.trim()) return true;
  
  const searchLower = searchTerm.toLowerCase();
  
  // Check court title
  const titleMatch = courtTitle.toLowerCase().includes(searchLower);
  
  // Check neighborhoods
  const neighborhoodMatch = courtMatchesNeighborhood(courtTitle, searchTerm);
  
  return titleMatch || neighborhoodMatch;
}
</file>

<file path="src/lib/posthog.ts">
import { PostHog } from "posthog-node"

// NOTE: This is a Node.js client, so you can use it for sending events from the server side to PostHog.
export default function PostHogClient() {
  const posthogClient = new PostHog(process.env.NEXT_PUBLIC_POSTHOG_KEY!, {
    host: process.env.NEXT_PUBLIC_POSTHOG_HOST,
    flushAt: 1,
    flushInterval: 0,
  })
  return posthogClient
}
</file>

<file path="src/lib/usePaywallAnalytics.ts">
import { useEffect, useRef } from "react";
import { logEvent } from "@/lib/logEvent";
import { PaywallAnalytics } from "@/lib/eventLogging";

export function usePaywallAnalytics(
  headlineGroup: string | null,
  gateDays: number,
): {
  markCTA: (plan: "monthly" | "annual") => void;
} {
  const openedAt = useRef<number>(performance.now());
  const sentDismiss = useRef(false);

  useEffect(() => {
    // Enhanced paywall tracking
    PaywallAnalytics.trackPaywallHit();
    
    // Also track the specific headline experiment
    logEvent("paywall_open", { 
      headlineGroup, 
      gateDays,
      // Add additional context for better analysis
      uniqueDays: JSON.parse(localStorage.getItem('fss_days') ?? '[]').length,
      daysUntilPaywall: Math.max(0, gateDays - JSON.parse(localStorage.getItem('fss_days') ?? '[]').length),
      userJourneyStage: 'paywall_hit',
    });
    
    const handleBeforeUnload = () => {
      if (sentDismiss.current) return;
      sentDismiss.current = true;
      
      const latencyMs = Math.round(performance.now() - openedAt.current);
      
      logEvent("paywall_dismiss", {
        headlineGroup,
        gateDays,
        latencyMs,
        // Enhanced dismiss tracking
        dismissType: latencyMs < 3000 ? 'immediate' : latencyMs < 10000 ? 'quick' : 'considered',
        uniqueDays: JSON.parse(localStorage.getItem('fss_days') ?? '[]').length,
        userJourneyStage: 'paywall_hit',
      });
    };
    
    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => window.removeEventListener("beforeunload", handleBeforeUnload);
  }, [headlineGroup, gateDays]);

  const markCTA = (plan: "monthly" | "annual") => {
    if (sentDismiss.current) return;
    sentDismiss.current = true; // avoid double log
    
    const latencyMs = Math.round(performance.now() - openedAt.current);
    const uniqueDays = JSON.parse(localStorage.getItem('fss_days') ?? '[]').length;
    
    logEvent("paywall_cta_click", {
      plan,
      headlineGroup,
      latencyMs,
      gateDays,
      uniqueDays,
      // Enhanced CTA tracking
      clickSpeed: latencyMs < 5000 ? 'immediate' : latencyMs < 15000 ? 'quick' : 'deliberate',
      userJourneyStage: 'conversion',
      conversionIntent: 'subscribing',
      daysUntilPaywall: Math.max(0, gateDays - uniqueDays),
    });
  };

  return { markCTA };
}
</file>

<file path="next.config.ts">
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  reactStrictMode: true,

  /* -------------------------------------------------------------- */
  /*  Rewrites (your existing Stripe webhook rewrite & PostHog rewrites) */
  /* -------------------------------------------------------------- */
  async rewrites() {
    return [
      {
        source: '/api/stripe-webhook',
        destination: '/api/stripe-webhook/',
      },
      {
        source: '/ingest/static/:path*',
        destination: 'https://us-assets.i.posthog.com/static/:path*',
      },
      {
        source: '/ingest/:path*',
        destination: 'https://us.i.posthog.com/:path*',
      },
      {
        source: '/ingest/decide',
        destination: 'https://us.i.posthog.com/decide',
      },
    ];
  },

  /* -------------------------------------------------------------- */
  /*  Headers – ensure sw-kill.js is never cached                   */
  /* -------------------------------------------------------------- */
  async headers() {
    return [
      {
        source: '/sw-kill.js',
        headers: [
          { key: 'Cache-Control', value: 'no-store' },
        ],
      },
    ];
  },

  // This is required to support PostHog trailing slash API requests
  skipTrailingSlashRedirect: true,
};

export default nextConfig;
</file>

<file path="scripts/mailMissingCards.ts">
/* scripts/mailMissingCards.ts
 *
 * Sends "add-payment-method" e-mails to any subscriber whose trial:
 *   • already ended  ── OR ──
 *   • ends in ≤ 24 h
 * and who still has no card on file.
 *
 * NOTE: With the switch to card-required trials (Jan 2025), new signups 
 * will always have payment methods. This script is primarily for legacy 
 * users who signed up during the card-optional period.
 *
 * Optionally forces trial_end = now so Stripe invoices immediately.
 * Designed to be called by:
 *   • CLI:  pnpm mail-missing-cards          (via ts-node)
 *   • GitHub Actions: runs daily at 17:30 UTC (10:30 AM PT during DST)
 */

import Stripe from 'stripe';
import { Pool } from 'pg';
import nodemailer from 'nodemailer';
import { z } from 'zod';

// ─────────────────────────────  ENV  ────────────────────────────────
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-01-27.acacia' as Stripe.LatestApiVersion,
});
const db = new Pool({ connectionString: process.env.DATABASE_URL });

const mailer = nodemailer.createTransport({
  host: process.env.SMTP_HOST!,
  port: Number(process.env.SMTP_PORT ?? 587),
  secure: Boolean(process.env.SMTP_SECURE ?? false), // true = 465
  auth: {
    user: process.env.SMTP_USER!,
    pass: process.env.SMTP_PASS!,
  },
});

// ────────────────────────────  TYPES  ───────────────────────────────
const rowSchema = z.object({
  email: z.string().email(),
  stripe_customer_id: z.string().min(1),
  stripe_subscription_id: z.string().min(1),
  trial_end: z.number(), // epoch seconds
});
type Row = z.infer<typeof rowSchema>;

// ──────────────────────────  CONFIG  ────────────────────────────────
const FORCE_END_TRIAL = true; // shorten past-due trials
const LOOKAHEAD_HOURS = 24; // reminder window
const PORTAL_RETURN = 'https://firstserveseattle.com/billing-done';

// ───────────────────────  CORE HELPERS  ─────────────────────────────
async function fetchCandidates(): Promise<Row[]> {
  const { rows } = await db.query<{
    email: string;
    stripe_customer_id: string;
    stripe_subscription_id: string;
    trial_end: number;
  }>(`
    SELECT email,
           stripe_customer_id,
           stripe_subscription_id,
           trial_end
      FROM public.subscribers
     WHERE has_card = FALSE
       AND status   IN ('trialing','past_due')
       AND to_timestamp(trial_end) <= NOW() + INTERVAL '${LOOKAHEAD_HOURS} hours'
  `);
  return rows.map((r) => rowSchema.parse(r));
}

async function createPortalLink(customerId: string): Promise<string> {
  const { url } = await stripe.billingPortal.sessions.create({
    customer: customerId,
    return_url: PORTAL_RETURN,
  });
  return url;
}

async function endTrialNow(subId: string): Promise<void> {
  await stripe.subscriptions.update(subId, {
    trial_end: 'now',
    proration_behavior: 'none',
  });
}

async function sendEmail(
  to: string,
  link: string,
  trialEnd: number
): Promise<void> {
  const dateStr = new Date(trialEnd * 1e3).toLocaleDateString('en-US', {
    timeZone: 'America/Los_Angeles',
  });

  await mailer.sendMail({
    from: 'FirstServeSeattle Billing <billing@firstserveseattle.com>',
    to,
    subject: 'Action required – add a payment method',
    text: `Your free trial ends on ${dateStr}. Add a card here: ${link}`,
    html: `<p>Your free trial ends on <strong>${dateStr}</strong>.</p>
              <p>Please <a href="${link}">add a card</a> to keep your subscription active.</p>`,
  });
  console.info(`✉️  Sent to ${to}`);
}

// ─────────────────────────  MAIN RUNNER  ────────────────────────────
export default async function run(): Promise<void> {
  const todo = await fetchCandidates();
  console.info(`Found ${todo.length} subscriber(s) without cards.`);

  for (const row of todo) {
    if (FORCE_END_TRIAL && row.trial_end * 1e3 < Date.now()) {
      await endTrialNow(row.stripe_subscription_id);
    }

    const portal = await createPortalLink(row.stripe_customer_id);
    await sendEmail(row.email, portal, row.trial_end);
  }

  await db.end();
  console.info('Done.');
}

// ───────── CLI entry-point (ts-node / node) ─────────
if (require.main === module) {
  run().catch((err) => {
    console.error('mailMissingCards failure:', err);
    process.exit(1);
  });
}
</file>

<file path="src/app/api/admin/analytics/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabaseClient';

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const range = searchParams.get('range') || '7d';
  
  try {
    // Calculate date range
    const days = range === '7d' ? 7 : range === '30d' ? 30 : 90;
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    // Get daily visits (mock data for now - replace with actual Supabase queries)
    const dailyVisits = await getDailyVisits(startDate, days);
    const userMetrics = await getUserMetrics(startDate);
    const gateExperiments = await getGateExperiments(startDate);
    const topEvents = await getTopEvents(startDate);
    const courtMetrics = await getCourtMetrics(startDate);
    
    return NextResponse.json({
      dailyVisits,
      userMetrics,
      gateExperiments,
      topEvents,
      courtMetrics,
    });
  } catch (error) {
    console.error('Analytics API error:', error);
    return NextResponse.json({ error: 'Failed to fetch analytics' }, { status: 500 });
  }
}

async function getDailyVisits(startDate: Date, days: number) {
  // This would be a real Supabase query in production
  // For now, generating mock data based on existing event structure
  
  try {
    const { data: events, error } = await supabase
      .from('events')
      .select('created_at, user_id, event_name')
      .gte('created_at', startDate.toISOString())
      .eq('event_name', 'enhanced_visit');
    
    if (error) throw error;
    
    // Process events into daily aggregates
    const dailyData = new Map();
    
    events?.forEach(event => {
      const date = new Date(event.created_at).toISOString().split('T')[0];
      if (!dailyData.has(date)) {
        dailyData.set(date, { visits: 0, uniqueUsers: new Set() });
      }
      dailyData.get(date).visits++;
      dailyData.get(date).uniqueUsers.add(event.user_id);
    });
    
    // Convert to array format
    const result = [];
    for (let i = 0; i < days; i++) {
      const date = new Date(startDate);
      date.setDate(date.getDate() + i);
      const dateStr = date.toISOString().split('T')[0];
      
      const dayData = dailyData.get(dateStr);
      result.push({
        date: dateStr,
        visits: dayData?.visits || 0,
        uniqueUsers: dayData?.uniqueUsers.size || 0,
      });
    }
    
    return result;
  } catch {
    // Return mock data if Supabase fails
    return Array.from({ length: days }, (_, i) => {
      const date = new Date(startDate);
      date.setDate(date.getDate() + i);
      return {
        date: date.toISOString().split('T')[0],
        visits: Math.floor(Math.random() * 50) + 30,
        uniqueUsers: Math.floor(Math.random() * 30) + 20,
      };
    });
  }
}

async function getUserMetrics(startDate: Date) {
  try {
    // Get total unique users
    const { data: totalUsers, error: totalError } = await supabase
      .from('events')
      .select('user_id')
      .gte('created_at', startDate.toISOString());
    
    if (totalError) throw totalError;
    
    const uniqueUsers = new Set(totalUsers?.map(e => e.user_id)).size;
    
    // Get active users (visited in last 7 days)
    const activeDate = new Date();
    activeDate.setDate(activeDate.getDate() - 7);
    
    const { data: activeUsers, error: activeError } = await supabase
      .from('events')
      .select('user_id')
      .gte('created_at', activeDate.toISOString());
    
    if (activeError) throw activeError;
    
    const activeCount = new Set(activeUsers?.map(e => e.user_id)).size;
    
    // Get paywall hits
    const { data: paywallEvents, error: paywallError } = await supabase
      .from('events')
      .select('*')
      .eq('event_name', 'paywall_reached')
      .gte('created_at', startDate.toISOString());
    
    if (paywallError) throw paywallError;
    
    // Get conversions (would need to track signup events)
    const { data: conversions, error: conversionError } = await supabase
      .from('events')
      .select('*')
      .eq('event_name', 'signup_completed')
      .gte('created_at', startDate.toISOString());
    
    if (conversionError) throw conversionError;
    
    const paywallHits = paywallEvents?.length || 0;
    const conversionCount = conversions?.length || 0;
    const conversionRate = paywallHits > 0 ? (conversionCount / paywallHits) * 100 : 0;
    
    return {
      totalUsers: uniqueUsers,
      activeUsers: activeCount,
      paywallHits,
      conversions: conversionCount,
      conversionRate,
    };
  } catch {
    // Return mock data if Supabase fails
    return {
      totalUsers: 1247,
      activeUsers: 342,
      paywallHits: 89,
      conversions: 23,
      conversionRate: 25.8,
    };
  }
}

async function getGateExperiments(startDate: Date) {
  try {
    const { data: events, error } = await supabase
      .from('events')
      .select('metadata')
      .eq('event_name', 'offer_experiment')
      .gte('created_at', startDate.toISOString());
    
    if (error) throw error;
    
    const gateStats = {
      gate3: { users: 0, conversions: 0, rate: 0 },
      gate5: { users: 0, conversions: 0, rate: 0 },
      gate7: { users: 0, conversions: 0, rate: 0 },
    };
    
    events?.forEach(event => {
      const gateDays = event.metadata?.gateDays;
      if (gateDays === 3) gateStats.gate3.users++;
      else if (gateDays === 5) gateStats.gate5.users++;
      else if (gateDays === 7) gateStats.gate7.users++;
    });
    
    // Calculate conversion rates (would need more sophisticated tracking)
    Object.keys(gateStats).forEach(gate => {
      const stats = gateStats[gate as keyof typeof gateStats];
      stats.conversions = Math.floor(stats.users * (0.2 + Math.random() * 0.15));
      stats.rate = stats.users > 0 ? (stats.conversions / stats.users) * 100 : 0;
    });
    
    return gateStats;
  } catch {
    return {
      gate3: { users: 412, conversions: 89, rate: 21.6 },
      gate5: { users: 389, conversions: 97, rate: 24.9 },
      gate7: { users: 446, conversions: 134, rate: 30.0 },
    };
  }
}

async function getTopEvents(startDate: Date) {
  try {
    const { data: events, error } = await supabase
      .from('events')
      .select('event_name')
      .gte('created_at', startDate.toISOString());
    
    if (error) throw error;
    
    const eventCounts = new Map();
    events?.forEach(event => {
      const count = eventCounts.get(event.event_name) || 0;
      eventCounts.set(event.event_name, count + 1);
    });
    
    const totalEvents = events?.length || 0;
    const topEvents = Array.from(eventCounts.entries())
      .map(([event, count]) => ({
        event,
        count,
        rate: totalEvents > 0 ? (count / totalEvents) * 100 : 0,
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);
    
    return topEvents;
  } catch {
    return [
      { event: 'court_view', count: 2841, rate: 85.2 },
      { event: 'filter_applied', count: 1247, rate: 37.4 },
      { event: 'paywall_reached', count: 89, rate: 2.7 },
      { event: 'maps_opened', count: 567, rate: 17.0 },
      { event: 'signup_clicked', count: 23, rate: 0.7 },
    ];
  }
}

async function getCourtMetrics(startDate: Date) {
  try {
    const { data: events, error } = await supabase
      .from('events')
      .select('event_name, metadata')
      .in('event_name', ['court_view', 'high_value_court_detail', 'high_value_maps_opened'])
      .gte('created_at', startDate.toISOString());
    
    if (error) throw error;
    
    const courtStats = new Map();
    
    events?.forEach(event => {
      const courtId = event.metadata?.courtId;
      const courtTitle = event.metadata?.courtTitle;
      
      if (courtId) {
        if (!courtStats.has(courtId)) {
          courtStats.set(courtId, {
            courtId: courtId.toString(),
            name: courtTitle || `Court ${courtId}`,
            views: 0,
            interactions: 0,
          });
        }
        
        const stats = courtStats.get(courtId);
        if (event.event_name === 'court_view') {
          stats.views++;
        } else {
          stats.interactions++;
        }
      }
    });
    
    return Array.from(courtStats.values())
      .sort((a, b) => b.views - a.views)
      .slice(0, 10);
  } catch {
    return [
      { courtId: '1', name: 'Green Lake Park', views: 234, interactions: 45 },
      { courtId: '2', name: 'Lincoln Park', views: 189, interactions: 38 },
      { courtId: '3', name: 'Volunteer Park', views: 167, interactions: 42 },
      { courtId: '4', name: 'Magnolia Playfield', views: 145, interactions: 28 },
      { courtId: '5', name: 'Cal Anderson Park', views: 134, interactions: 31 },
    ];
  }
}
</file>

<file path="src/app/billing/page.tsx">
/* src/app/billing/page.tsx
 * When visited, immediately redirects the user to Stripe's portal.
 */
import { cookies } from 'next/headers';
import { createBillingPortal } from '@/lib/createBillingPortal';
import { redirect } from 'next/navigation';

export const dynamic = 'force-dynamic';            // never cache

export default async function BillingRedirectPage() {
  const cookieStore = await cookies();
  const authCookie = cookieStore.get('sb-access-token')?.value; // Supabase client cookie

  try {
    const url = await createBillingPortal(authCookie);
    redirect(url);                                   // 302 to Stripe
  } catch (err) {
    console.error('[billing] redirect failed', err);
    // Fallback: show an error page or redirect to /members with error
    redirect('/members?billingError=1');
  }
}
</file>

<file path="src/app/components/MaintenanceModal.tsx">
"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from './ui/dialog';

export default function MaintenanceModal() {
  // Uncomment the line below to show the maintenance modal
  const isMaintenanceMode = true;
  // const isMaintenanceMode = false;

  if (!isMaintenanceMode) return null;

  return (
    <Dialog open={isMaintenanceMode}>
      <DialogContent className="sm:max-w-md border-orange-200 bg-orange-50">
        <DialogHeader>
          <DialogTitle className="text-orange-800">
            🔧 Scheduled Maintenance
          </DialogTitle>
          <DialogDescription className="text-orange-700">
            We apologize for the inconvenience. Our website is currently undergoing scheduled maintenance on June 30, 2025. 
            Please check back tomorrow as we work to improve your experience.
          </DialogDescription>
        </DialogHeader>
        <div className="text-center pt-4">
          <p className="text-sm text-orange-700">
            Thank you for your understanding!
          </p>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/app/admin/page.tsx">
'use client';

import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/app/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/app/components/ui/tabs';
import { Badge } from '@/app/components/ui/badge';
import { Button } from '@/app/components/ui/button';
import { BarChart3, Users, DollarSign, TrendingUp, Eye, MousePointer, Filter } from 'lucide-react';

interface AnalyticsData {
  dailyVisits: { date: string; visits: number; uniqueUsers: number }[];
  userMetrics: {
    totalUsers: number;
    activeUsers: number;
    paywallHits: number;
    conversions: number;
    conversionRate: number;
  };
  gateExperiments: {
    gate3: { users: number; conversions: number; rate: number };
    gate5: { users: number; conversions: number; rate: number };
    gate7: { users: number; conversions: number; rate: number };
  };
  topEvents: { event: string; count: number; rate: number }[];
  courtMetrics: { courtId: string; name: string; views: number; interactions: number }[];
}

export default function AdminDashboard() {
  const [data, setData] = useState<AnalyticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [timeRange, setTimeRange] = useState('7d');

  const fetchAnalytics = useCallback(async () => {
    try {
      const response = await fetch(`/api/admin/analytics?range=${timeRange}`);
      const analyticsData = await response.json();
      setData(analyticsData);
    } catch (error) {
      console.error('Failed to fetch analytics:', error);
      // Mock data for development
      setData({
        dailyVisits: [
          { date: '2024-01-01', visits: 45, uniqueUsers: 32 },
          { date: '2024-01-02', visits: 52, uniqueUsers: 38 },
          { date: '2024-01-03', visits: 68, uniqueUsers: 45 },
          { date: '2024-01-04', visits: 71, uniqueUsers: 51 },
          { date: '2024-01-05', visits: 89, uniqueUsers: 62 },
          { date: '2024-01-06', visits: 94, uniqueUsers: 68 },
          { date: '2024-01-07', visits: 103, uniqueUsers: 74 },
        ],
        userMetrics: {
          totalUsers: 1247,
          activeUsers: 342,
          paywallHits: 89,
          conversions: 23,
          conversionRate: 25.8,
        },
        gateExperiments: {
          gate3: { users: 412, conversions: 89, rate: 21.6 },
          gate5: { users: 389, conversions: 97, rate: 24.9 },
          gate7: { users: 446, conversions: 134, rate: 30.0 },
        },
        topEvents: [
          { event: 'court_view', count: 2841, rate: 85.2 },
          { event: 'filter_applied', count: 1247, rate: 37.4 },
          { event: 'paywall_reached', count: 89, rate: 2.7 },
          { event: 'maps_opened', count: 567, rate: 17.0 },
          { event: 'signup_clicked', count: 23, rate: 0.7 },
        ],
        courtMetrics: [
          { courtId: '1', name: 'Green Lake Park', views: 234, interactions: 45 },
          { courtId: '2', name: 'Lincoln Park', views: 189, interactions: 38 },
          { courtId: '3', name: 'Volunteer Park', views: 167, interactions: 42 },
          { courtId: '4', name: 'Magnolia Playfield', views: 145, interactions: 28 },
          { courtId: '5', name: 'Cal Anderson Park', views: 134, interactions: 31 },
        ],
      });
    }
    setLoading(false);
  }, [timeRange]);

  useEffect(() => {
    fetchAnalytics();
  }, [fetchAnalytics]);

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-pulse text-lg">Loading Analytics...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Admin Dashboard</h1>
        <div className="flex gap-2">
          {['7d', '30d', '90d'].map((range) => (
            <Button
              key={range}
              variant={timeRange === range ? 'default' : 'outline'}
              size="sm"
              onClick={() => setTimeRange(range)}
            >
              {range}
            </Button>
          ))}
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{data?.userMetrics.totalUsers.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">+12% from last period</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Users</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{data?.userMetrics.activeUsers}</div>
            <p className="text-xs text-muted-foreground">
              {data?.userMetrics.activeUsers && data?.userMetrics.totalUsers 
                ? ((data.userMetrics.activeUsers / data.userMetrics.totalUsers) * 100).toFixed(1) 
                : '0'}% of total
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Conversion Rate</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{data?.userMetrics.conversionRate.toFixed(1)}%</div>
            <p className="text-xs text-muted-foreground">
              {data?.userMetrics.conversions} / {data?.userMetrics.paywallHits} paywall hits
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Paywall Hits</CardTitle>
            <Eye className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{data?.userMetrics.paywallHits}</div>
            <p className="text-xs text-muted-foreground">
              {data?.userMetrics.paywallHits && data?.userMetrics.activeUsers 
                ? ((data.userMetrics.paywallHits / data.userMetrics.activeUsers) * 100).toFixed(1) 
                : '0'}% of active users
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="experiments">Gate Experiments</TabsTrigger>
          <TabsTrigger value="events">Events</TabsTrigger>
          <TabsTrigger value="courts">Court Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Daily Traffic</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64 w-full">
                <div className="grid grid-cols-7 gap-2 h-full">
                  {data?.dailyVisits.map((day, i) => (
                    <div key={i} className="flex flex-col items-center gap-2">
                      <div className="text-xs text-muted-foreground">
                        {new Date(day.date).toLocaleDateString('en-US', { weekday: 'short' })}
                      </div>
                      <div className="flex-1 w-full bg-gray-200 rounded-t relative">
                        <div
                          className="bg-blue-500 rounded-t w-full absolute bottom-0"
                          style={{
                            height: `${(day.visits / Math.max(...data.dailyVisits.map(d => d.visits))) * 100}%`,
                          }}
                        />
                      </div>
                      <div className="text-sm font-medium">{day.visits}</div>
                      <div className="text-xs text-muted-foreground">{day.uniqueUsers} unique</div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="experiments" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {Object.entries(data?.gateExperiments || {}).map(([gate, metrics]) => (
              <Card key={gate}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {gate.replace('gate', '')} Day Gate
                    <Badge variant={metrics.rate > 25 ? 'default' : 'secondary'}>
                      {metrics.rate.toFixed(1)}%
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Users:</span>
                      <span className="font-medium">{metrics.users}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-muted-foreground">Conversions:</span>
                      <span className="font-medium">{metrics.conversions}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className="bg-green-500 h-2 rounded-full"
                        style={{ width: `${metrics.rate}%` }}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="events" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Top Events</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {data?.topEvents.map((event, i) => (
                  <div key={i} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full">
                        {event.event.includes('filter') && <Filter className="h-4 w-4 text-blue-600" />}
                        {event.event.includes('view') && <Eye className="h-4 w-4 text-blue-600" />}
                        {event.event.includes('click') && <MousePointer className="h-4 w-4 text-blue-600" />}
                        {event.event.includes('paywall') && <DollarSign className="h-4 w-4 text-blue-600" />}
                        {event.event.includes('maps') && <BarChart3 className="h-4 w-4 text-blue-600" />}
                      </div>
                      <div>
                        <div className="font-medium">{event.event.replace('_', ' ')}</div>
                        <div className="text-sm text-muted-foreground">{event.rate}% of sessions</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-bold">{event.count.toLocaleString()}</div>
                      <div className="text-sm text-muted-foreground">events</div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="courts" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Court Performance</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {data?.courtMetrics.map((court, i) => (
                  <div key={i} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium">{court.name}</div>
                      <div className="text-sm text-muted-foreground">Court ID: {court.courtId}</div>
                    </div>
                    <div className="flex gap-6 text-right">
                      <div>
                        <div className="font-bold">{court.views}</div>
                        <div className="text-sm text-muted-foreground">views</div>
                      </div>
                      <div>
                        <div className="font-bold">{court.interactions}</div>
                        <div className="text-sm text-muted-foreground">interactions</div>
                      </div>
                      <div>
                        <div className="font-bold">{court.views > 0 ? ((court.interactions / court.views) * 100).toFixed(1) : '0'}%</div>
                        <div className="text-sm text-muted-foreground">engagement</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="src/app/auth/callback/route.ts">
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const redirectTo = requestUrl.searchParams.get('redirect_to') || '/members'
  const mode = requestUrl.searchParams.get('mode') || 'login'

  console.log('🔄 OAuth callback received:', { code: !!code, redirectTo, mode })

  if (code) {
    const supabase = createRouteHandlerClient({ cookies })
    
    const { data, error } = await supabase.auth.exchangeCodeForSession(code)
    
    if (error) {
      console.error('❌ OAuth exchange error:', error)
      return NextResponse.redirect(new URL('/login?error=oauth_error', requestUrl.origin))
    }

    if (data.user) {
      console.log('✅ OAuth user authenticated:', data.user.email)
      
      // If this is signup mode, we need to check if user has completed payment
      if (mode === 'signup' || redirectTo === '/signup') {
        console.log('🔄 Checking if Apple user needs to complete payment setup')
        
        // Check if user exists in subscribers table (has completed payment)
        const { data: subscriber } = await supabase
          .from('subscribers')
          .select('id, status')
          .eq('email', data.user.email)
          .maybeSingle()

        if (!subscriber) {
          console.log('💳 Apple user needs payment setup, creating Stripe checkout with prefilled email')
          
          // Create Stripe checkout session with prefilled email
          try {
            const checkoutResponse = await fetch(`${requestUrl.origin}/api/create-checkout-session`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                email: data.user.email,
                plan: 'monthly' // default to monthly
              })
            })

            if (checkoutResponse.ok) {
              const { url } = await checkoutResponse.json()
              console.log('✅ Redirecting Apple user to Stripe checkout with prefilled email')
              return NextResponse.redirect(url)
            } else {
              console.error('❌ Failed to create checkout session for Apple user')
              return NextResponse.redirect(new URL('/signup?apple_user=true&error=checkout_failed', requestUrl.origin))
            }
          } catch (checkoutError) {
            console.error('❌ Error creating checkout session:', checkoutError)
            return NextResponse.redirect(new URL('/signup?apple_user=true&error=checkout_failed', requestUrl.origin))
          }
        } else {
          console.log('✅ Apple user has payment setup, redirecting to members')
          // Existing user with payment - redirect to members
          return NextResponse.redirect(new URL('/members', requestUrl.origin))
        }
      }
    }

    // Default redirect
    return NextResponse.redirect(new URL(redirectTo, requestUrl.origin))
  }

  // No code - redirect to error page
  console.error('❌ No authorization code received')
  return NextResponse.redirect(new URL('/login?error=no_code', requestUrl.origin))
}
</file>

<file path="src/app/q/[slug]/page.tsx">
/** @file /q/[slug]/page.tsx — record scan then redirect immediately */
import { createClient } from '@supabase/supabase-js'
import { redirect } from 'next/navigation'
import { headers } from 'next/headers'

/* ------------------------------------------------------------------ */
/* Updated props type for Next.js 15 */
/* ------------------------------------------------------------------ */
type QRProps = {
  params: Promise<{ slug: string }>
}

export const dynamic = 'force-dynamic' // always server-render

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // server-side key
)

/* ------------------------------------------------------------------ */
/* Helper to convert slug to potential court name */
/* ------------------------------------------------------------------ */
function slugToCourtName(slug: string): string {
  return slug
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
}

/* ------------------------------------------------------------------ */
/* Handler */
/* ------------------------------------------------------------------ */
export default async function QRRedirect({ params }: QRProps) {
  /* 0️⃣ Await the params promise */
  const { slug } = await params
  
  let facilityTitle: string | null = null
  let facilityId: number | null = null

  /* 1️⃣ Try tennis_facilities table first */
  const { data: facility } = await supabase
    .from('tennis_facilities')
    .select('id, title')
    .eq('slug', slug)
    .maybeSingle()

  if (facility) {
    facilityTitle = facility.title
    facilityId = facility.id
    console.log(`🎾 Found facility in tennis_facilities: ${facilityTitle}`)
  } else {
    /* 2️⃣ Fallback: try to find in tennis_courts by converting slug to name */
    const potentialName = slugToCourtName(slug)
    console.log(`🔍 Searching tennis_courts for: ${potentialName}`)
    
    const { data: court } = await supabase
      .from('tennis_courts')
      .select('id, title')
      .ilike('title', `%${potentialName}%`)
      .maybeSingle()

    if (court) {
      facilityTitle = court.title
      facilityId = court.id
      console.log(`🎾 Found court in tennis_courts: ${facilityTitle}`)
    }
  }

  /* 3️⃣ Record the scan (ignore failure so redirect is never blocked) */
  if (facilityId) {
    const hdr = await headers()
    try {
      await supabase
        .from('qr_scans')
        .insert({
          facility_id: facilityId,
          user_agent: hdr.get('user-agent') ?? null,
          referer: hdr.get('referer') ?? null,
        })
    } catch {
      // swallow DB errors - don't block redirect
    }
  }

  /* 4️⃣ Redirect with court name filter */
  const baseUrl = 'https://firstserveseattle.com'
  
  if (facilityTitle) {
    // Redirect with court name as search parameter
    const courtParam = encodeURIComponent(facilityTitle)
    console.log(`🎾 QR scan for ${facilityTitle}, redirecting with filter`)
    redirect(`${baseUrl}?court=${courtParam}`)
  } else {
    // Fallback to main page if no facility found
    console.log(`❓ QR scan for unknown facility ${slug}, regular redirect`)
    redirect(baseUrl)
  }
}
</file>

<file path="src/lib/eventLogging.ts">
// Enhanced event logging with business impact tracking
import { logEvent } from '@/lib/logEvent';

export type UserJourneyStage = 
  | 'discovery'     // First visit, exploring
  | 'engaged'       // Using filters, searching
  | 'committed'     // Viewing details, using maps
  | 'paywall_hit'   // Hit the paywall
  | 'conversion';   // Signed up

export type ConversionIntent = 
  | 'browsing'      // Just looking
  | 'planning'      // Searching specific courts
  | 'ready_to_play' // Opening maps, getting directions
  | 'subscribing';  // In paywall flow

interface EnhancedEventContext {
  userJourneyStage?: UserJourneyStage;
  conversionIntent?: ConversionIntent;
  sessionDepth?: number;
  timeOnSite?: number;
  uniqueDays?: number;
  gateDays?: number;
  daysUntilPaywall?: number;
}

// Only log filter events when they're actually changed from defaults
class FilterEventTracker {
  private static defaultFilters = {
    amenities: {
      lights: false,
      hitting_wall: false,
      pickleball_lined: false,
      ball_machine: false,
    },
    popFilter: null as string | null,
  };

  private static lastFilters = { ...this.defaultFilters };

  static trackFilterChange(amenities: Record<string, boolean>, popFilter: string | null) {
    const currentFilters = { amenities, popFilter };
    
    // Check if this is actually a change from defaults or last state
    const isDefaultState = JSON.stringify(currentFilters) === JSON.stringify(this.defaultFilters);
    const isUnchanged = JSON.stringify(currentFilters) === JSON.stringify(this.lastFilters);
    
    if (isDefaultState || isUnchanged) {
      return; // Don't log default or unchanged states
    }

    // Determine user intent based on filter combination
    const intent = this.getConversionIntent(amenities, popFilter);
    const stage = this.getUserJourneyStage(amenities, popFilter);
    
    // Get active filters only (more actionable data)
    const activeFilters = Object.entries(amenities)
      .filter(([, active]) => active)
      .map(([filter]) => filter);

    logEvent('filter_applied', {
      activeFilters,
      popFilter,
      intent,
      stage,
      filterCount: activeFilters.length + (popFilter ? 1 : 0),
      // Track filter combinations that suggest serious intent
      isHighIntentFilter: this.isHighIntentCombination(amenities, popFilter),
    });

    this.lastFilters = { 
      amenities: {
        lights: amenities.lights || false,
        hitting_wall: amenities.hitting_wall || false,
        pickleball_lined: amenities.pickleball_lined || false,
        ball_machine: amenities.ball_machine || false,
      }, 
      popFilter 
    };
  }

  private static getConversionIntent(amenities: Record<string, boolean>, popFilter: string | null): ConversionIntent {
    const activeCount = Object.values(amenities).filter(Boolean).length;
    
    if (activeCount === 0 && !popFilter) return 'browsing';
    if (activeCount >= 2 || popFilter === 'walk') return 'ready_to_play';
    if (activeCount === 1 || popFilter) return 'planning';
    return 'browsing';
  }

  private static getUserJourneyStage(amenities: Record<string, boolean>, popFilter: string | null): UserJourneyStage {
    const hasSpecificNeeds = Object.values(amenities).some(Boolean) || popFilter;
    return hasSpecificNeeds ? 'engaged' : 'discovery';
  }

  private static isHighIntentCombination(amenities: Record<string, boolean>, popFilter: string | null): boolean {
    // Combinations that suggest user is ready to play today
    return amenities.lights && popFilter === 'walk' || 
           amenities.ball_machine || 
           (Object.values(amenities).filter(Boolean).length >= 2);
  }
}

// Enhanced paywall analytics for days-based system
class PaywallAnalytics {
  static trackPaywallHit() {
    const uniqueDays = JSON.parse(localStorage.getItem('fss_days') ?? '[]').length;
    const gateDays = Number(localStorage.getItem('fss_gate') ?? 3);
    const daysUntilPaywall = Math.max(0, gateDays - uniqueDays + 1);
    
    logEvent('paywall_reached', {
      uniqueDays,
      gateDays,
      daysUntilPaywall,
      userJourneyStage: 'paywall_hit',
      // Track different gate cohorts for A/B testing
      gateGroup: this.getGateGroup(gateDays),
      // More granular timing
      isEarlyHit: uniqueDays < gateDays - 1,
      isOnTimeHit: uniqueDays === gateDays,
      isLateHit: uniqueDays > gateDays,
    });
  }

  static trackOfferExperiment(offer: string, gateDays: number) {
    logEvent('offer_experiment', {
      offer,
      gateDays,
      gateGroup: this.getGateGroup(gateDays),
      experimentVersion: '2024_q2', // Version your experiments
    });
  }

  private static getGateGroup(gateDays: number): string {
    if (gateDays <= 3) return 'strict';
    if (gateDays <= 5) return 'moderate';
    return 'permissive';
  }
}

// Track user engagement depth and conversion signals
class EngagementTracker {
  private static sessionStartTime = Date.now();
  private static actionCount = 0;

  static trackHighValueAction(action: string, courtId?: number, courtTitle?: string) {
    this.actionCount++;
    const timeOnSite = Math.round((Date.now() - this.sessionStartTime) / 1000);
    
    // Determine user journey stage based on action type
    const stage = this.getStageFromAction(action);
    const intent = this.getIntentFromAction(action, timeOnSite, this.actionCount);
    
    logEvent(`high_value_${action}`, {
      courtId,
      courtTitle,
      userJourneyStage: stage,
      conversionIntent: intent,
      sessionDepth: this.actionCount,
      timeOnSite,
      // Conversion probability indicators
      isQuickAction: timeOnSite < 30,
      isDeepEngagement: this.actionCount >= 5,
      isReadyToPlay: intent === 'ready_to_play',
    });
  }

  private static getStageFromAction(action: string): UserJourneyStage {
    if (action.includes('maps') || action.includes('directions')) return 'committed';
    if (action.includes('detail') || action.includes('expand')) return 'engaged';
    return 'discovery';
  }

  private static getIntentFromAction(action: string, timeOnSite: number, actionCount: number): ConversionIntent {
    if (action.includes('maps') || action.includes('ball_machine')) return 'ready_to_play';
    if (timeOnSite > 120 && actionCount >= 3) return 'planning';
    return 'browsing';
  }
}

// Enhanced conversion tracking with better attribution
class ConversionTracker {
  static trackVisit(pathname: string, showPaywall: boolean) {
    const uniqueDays = JSON.parse(localStorage.getItem('fss_days') ?? '[]').length;
    const gateDays = Number(localStorage.getItem('fss_gate') ?? 3);
    const visitNumber = Number(localStorage.getItem('visitNumber') ?? 0);
    
    logEvent('enhanced_visit', {
      pathname,
      showPaywall,
      uniqueDays,
      gateDays,
      visitNumber,
      daysUntilPaywall: Math.max(0, gateDays - uniqueDays),
      userJourneyStage: showPaywall ? 'paywall_hit' : 'discovery',
      // Better segmentation for analysis
      visitorType: this.getVisitorType(visitNumber, uniqueDays),
      paywalStatus: this.getPaywallStatus(uniqueDays, gateDays),
    });
  }

  private static getVisitorType(visitNumber: number, uniqueDays: number): string {
    if (visitNumber === 1) return 'new';
    if (uniqueDays >= 3) return 'regular';
    return 'returning';
  }

  private static getPaywallStatus(uniqueDays: number, gateDays: number): string {
    const remaining = gateDays - uniqueDays;
    if (remaining <= 0) return 'blocked';
    if (remaining === 1) return 'final_day';
    if (remaining <= 2) return 'approaching';
    return 'safe';
  }

  static trackOfferImpression(currentOffer: string) {
    const gateDays = Number(localStorage.getItem('fss_gate') ?? 3);
    
    logEvent('offer_impression', {
      offer: currentOffer,
      gateDays,
      timestamp: new Date().toISOString(),
      // Track for A/B test analysis
      cohort: this.getOfferCohort(),
    });
  }

  private static getOfferCohort(): string {
    // Use stable user ID for consistent cohort assignment
    const userId = localStorage.getItem('userId') ?? '';
    const hash = userId.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    return hash % 2 === 0 ? 'control' : 'variant';
  }
}

// Export the enhanced tracking functions
export {
  FilterEventTracker,
  PaywallAnalytics,
  EngagementTracker,
  ConversionTracker,
};

// Backward compatibility wrapper for existing code
export function enhancedLogEvent(
  event: string, 
  metadata: Record<string, unknown> = {},
  context: EnhancedEventContext = {}
) {
  // Add enhanced context to all events
  const enhancedMetadata = {
    ...metadata,
    ...context,
    timestamp: new Date().toISOString(),
    sessionId: localStorage.getItem('userId'), // For session tracking
  };

  logEvent(event, enhancedMetadata);
}
</file>

<file path="src/lib/shouldShowPaywall.ts">
/* -------------------------------------------------------------------------- *
   shouldShowPaywall()
   --------------------------------------------------------------------------
   • Cohort assignment: each anonymous browser is randomly locked to 3, 5, or
     7 free-use days. Stored once in localStorage (key = "fss_gate").
   • Visitor counter : every new calendar day adds one element to the "fss_days"
     array.  No network call required.
   • Returns `true` *after* the allocation is exhausted
     (uniqueDays  >  gateDays) so the pay-wall appears on day 4 / 6 / 8.
 * -------------------------------------------------------------------------- */

const FSS_GATE_KEY = 'fss_gate';
const FSS_DAYS_KEY = 'fss_days';
const FSS_SEEN_LANDING_KEY = 'fss_seen_landing';

export async function shouldShowPaywall(): Promise<boolean> {
  if (typeof window === 'undefined') return false; // SSR / bots

  /* ---------- 1️⃣  assign (sticky) gate cohort -------------------------- */
  let gateDays = Number(localStorage.getItem(FSS_GATE_KEY));
  if (![3].includes(gateDays)) {
    gateDays = 3;
    localStorage.setItem(FSS_GATE_KEY, String(gateDays));
  }

  /* ---------- 2️⃣  record today's visit -------------------------------- */
  const today = new Date().toISOString().slice(0, 10);          // YYYY-MM-DD
  const days: string[] = JSON.parse(localStorage.getItem(FSS_DAYS_KEY) ?? '[]');

  if (!days.includes(today)) {
    days.push(today);
    localStorage.setItem(FSS_DAYS_KEY, JSON.stringify(days));
  }

  /* ---------- 3️⃣  show pay-wall on the day AFTER the cap -------------- */
  return days.length > gateDays;
}

export function isFirstTimeVisitor(): boolean {
  if (typeof window === 'undefined') return true; // SSR safe
  return !localStorage.getItem(FSS_SEEN_LANDING_KEY);
}

export function markLandingSeen(): void {
  if (typeof window === 'undefined') return;
  localStorage.setItem(FSS_SEEN_LANDING_KEY, 'true');
}
</file>

<file path="src/app/components/PlanSelector.tsx">
// src/app/components/PlanSelector.tsx
"use client";

import React from "react";
import { Check, Sparkles } from "lucide-react";
import { cn } from "@/lib/utils";
interface PlanSelectorProps {
  selectedPlan: "monthly" | "annual";
  onPlanSelect: (plan: "monthly" | "annual") => void;
  features: string[];
  assignedOffer?: { id: string; discount?: { percentage: number } } | null;
}

const prices = { monthly: 8, annual: 64 };

export function PlanSelector({
  selectedPlan,
  onPlanSelect,
  features,
  assignedOffer,
}: PlanSelectorProps) {
  const isMonthly = selectedPlan === "monthly";
  const isAnnual  = selectedPlan === "annual";

  return (
    <div className="space-y-6">
      {/* Plan toggle */}
      <div className="flex justify-center rounded-md border border-input bg-gray-100 p-1 shadow-sm">
        <button
          onClick={() => onPlanSelect("monthly")}
          className={cn(
            "flex-1 rounded-md px-3 py-1.5 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            isMonthly
              ? "bg-white text-black shadow"
              : "text-gray-600 hover:bg-white/50 hover:text-black",
          )}
        >
          Monthly
        </button>
        <button
          onClick={() => onPlanSelect("annual")}
          className={cn(
            "flex-1 rounded-md px-3 py-1.5 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            isAnnual
              ? "bg-white text-black shadow"
              : "text-gray-600 hover:bg-white/50 hover:text-black",
          )}
        >
          Annual <span className="ml-1 hidden sm:inline">(Save 33%)</span>
        </button>
      </div>

      {/* Price display */}
      <div className="text-center space-y-2">
        {assignedOffer?.discount && selectedPlan === 'monthly' ? (
          <>
            {/* Show discounted pricing for monthly only */}
            <div className="flex items-baseline justify-center gap-2">
              <span className="text-3xl font-bold line-through decoration-2 decoration-gray-400">
                ${prices[selectedPlan]}
              </span>
              <span className="text-3xl font-bold text-green-700">
                ${assignedOffer.discount.percentage === 50 
                  ? Math.round(prices[selectedPlan] * 0.5) 
                  : prices[selectedPlan]
                } first month
              </span>
            </div>
            <p className="text-sm font-semibold text-[#0c372b]">
              {assignedOffer.discount.percentage}% off your first month, then ${prices[selectedPlan]} / month
            </p>
          </>
        ) : isAnnual ? (
          <>
            {/* Show annual pricing with discount appearance */}
            <div className="flex items-baseline justify-center gap-2">
              <span className="text-3xl font-bold line-through decoration-2 decoration-gray-400">
                $96
              </span>
              <span className="text-3xl font-bold text-[#0c372b]">
                ${prices.annual}
              </span>
            </div>
            <p className="text-sm font-semibold text-[#0c372b]">
              $${(prices.annual / 12).toFixed(2)} / month billed annually
            </p>
          </>
        ) : (
          <>
            {/* Show monthly pricing */}
            <div className="flex items-baseline justify-center gap-2">
              <span className="text-3xl font-bold text-[#0c372b]">
                ${prices.monthly}
              </span>
            </div>
            <p className="text-sm font-semibold text-[#0c372b]">
              ${prices.monthly} / month
            </p>
          </>
        )}

        <p className="text-sm text-gray-600">
          {isAnnual
            ? "Best value – save 33 %."
            : "Start now, cancel anytime."}
        </p>
      </div>

      {/* Feature list */}
      <div className="space-y-3 rounded-lg bg-gray-50 p-4 border">
        <div className="flex items-center gap-2 text-sm font-medium text-gray-800">
          <Sparkles className="h-4 w-4 text-yellow-500" />
          What you get:
        </div>
        <ul className="grid gap-2 text-sm text-gray-700">
          {features.map((f, i) => (
            <li key={i} className="flex items-center gap-2">
              <Check className="h-4 w-4 text-green-600 shrink-0" />
              {f}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}
</file>

<file path="src/app/login/LoginFormClient.tsx">
// src/app/login/LoginFormClient.tsx
"use client";

import React, { useState, useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter, useSearchParams } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import SocialAuthButtons from "@/components/SocialAuthButtons";

export default function LoginFormClient({ 
  redirectTo, 
  initialEmail = '',
  showTrialMessage = false
}: { 
  redirectTo: string; 
  initialEmail?: string;
  showTrialMessage?: boolean;
}) {
  const supabase = createClientComponentClient();
  const router = useRouter();
  const searchParams = useSearchParams();

  const [email, setEmail] = useState(initialEmail);
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // Check for OAuth errors in URL
  useEffect(() => {
    const oauthError = searchParams.get('error');
    if (oauthError) {
      switch (oauthError) {
        case 'oauth_error':
          setError('Sign in with Apple failed. Please try again.');
          break;
        case 'no_user':
          setError('Unable to get user information from Apple. Please try again.');
          break;
        case 'oauth_failed':
          setError('Authentication failed. Please try again.');
          break;
        default:
          setError('An error occurred during sign in. Please try again.');
      }
    }
  }, [searchParams]);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    console.log('🔐 Attempting login...');

    const { error: loginError, data } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (loginError || !data.user) {
      console.error('❌ Login failed:', loginError);
      setError(
        loginError?.message === "Invalid login credentials"
          ? "Incorrect email or password. Please try again."
          : loginError?.message || "Login failed."
      );
      setLoading(false);
      return;
    }

    console.log('✅ Login successful, redirecting to:', redirectTo);
    router.push(redirectTo);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 px-4 py-12">
      <div className="w-full max-w-md">
        {/* logo */}
        <div className="flex justify-center mb-8">
          <Image
            src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
            alt="First Serve Seattle Logo"
            width={80}
            height={80}
            priority
          />
        </div>

        <div className="bg-white p-8 rounded-xl shadow-lg border border-gray-100">
          <h1 className="text-2xl font-bold text-center mb-6 text-gray-800">
            Sign In
          </h1>

          {showTrialMessage && (
            <div className="mb-6 rounded-md bg-green-50 p-4 border border-green-200">
              <div className="flex items-center">
                <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <p className="text-sm font-medium text-green-800">
                  Great! Your 14-day free trial is active. Sign in to access your account.
                </p>
              </div>
            </div>
          )}

          {error && (
            <div className="mb-4 rounded-md bg-red-50 p-3 text-sm text-red-700 border border-red-200">
              {error}
            </div>
          )}

          {/* Social Auth Buttons */}
          <div className="mb-6">
            <SocialAuthButtons 
              mode="login" 
              redirectTo={redirectTo}
              disabled={loading}
            />
          </div>

          <form onSubmit={handleLogin} className="space-y-5">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="block w-full rounded-lg border border-gray-300 px-3 py-2"
                required
                placeholder="you@example.com"
                autoComplete="email"
              />
            </div>

            <div>
              <div className="flex justify-between items-baseline">
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Password
                </label>
                <Link
                  href="/request-password-reset"
                  className="text-sm font-medium text-blue-600 hover:underline"
                >
                  Forgot Password?
                </Link>
              </div>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="block w-full rounded-lg border border-gray-300 px-3 py-2"
                required
                placeholder="••••••••"
                autoComplete="current-password"
              />
            </div>

            <button
              type="submit"
              className="w-full rounded-lg bg-[#0c372b] px-5 py-2.5 text-sm font-semibold text-white"
              disabled={loading}
            >
              {loading ? "Signing in…" : "Sign In"}
            </button>

            <div className="mt-6 text-center text-sm text-gray-600 space-y-1">
              <p>
                Don&apos;t have an account?{" "}
                <Link
                  href="/signup"
                  className="font-medium text-blue-600 hover:underline"
                >
                  Sign Up
                </Link>
              </p>
              <p>
                Need help?{" "}
                <a
                  href="mailto:support@firstserveseattle.com"
                  className="font-medium text-blue-600 hover:underline"
                >
                  Contact support
                </a>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/tennis-courts/components/TennisCourtList.tsx">
"use client";

import React, { useEffect, useMemo, useState } from "react";
import { useSearchParams } from "next/navigation";
// import { usePostHog } from "posthog-js/react";
import dynamic from "next/dynamic";
import Image from "next/image";
import { getTennisCourts, TennisCourt } from "@/lib/getTennisCourts";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Info,
  Star,
  MapPin,
  Footprints,
  ThumbsUp,
  X,
} from "lucide-react";
import { logEvent } from "@/lib/logEvent";
import { FilterEventTracker, EngagementTracker } from "@/lib/eventLogging";
import { courtMatchesSearch } from "@/lib/neighborhoodMapping";

const AboutUs = dynamic(() => import("./AboutUs"), { ssr: false });

type AmenityKey =
  | "lights"
  | "hitting_wall"
  | "pickleball_lined"
  | "ball_machine";

type PopFilter = "walk" | "low" | null;

const mapsUrl = (c: TennisCourt) =>
  c.Maps_url?.startsWith("http")
    ? c.Maps_url
    : `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
        c.address ?? c.title
      )}`;

const TIME = [
  "6:00 AM","7:00 AM","8:00 AM","9:00 AM","10:00 AM","11:00 AM",
  "12:00 PM","1:00 PM","2:00 PM","3:00 PM","4:00 PM","5:00 PM",
  "6:00 PM","7:00 PM","8:00 PM","9:00 PM","10:00 PM",
];
const toMin = (t: string) => {
  const [clock, ap] = t.toUpperCase().split(" ");
  const [h, m] = clock.split(":").map(Number);
  return ((h % 12) + (ap === "PM" ? 12 : 0)) * 60 + m;
};
const slotClr = (court: TennisCourt, t: string) => {
  const s = toMin(t), mid = s + 30;
  const free = (a: number, b: number) =>
    court.parsed_intervals.some(({ start, end }) => {
      const st = toMin(start), en = toMin(end);
      return st <= a && en >= b;
    });
  const a = free(s, mid), b = free(mid, mid + 30);
  if (a && b) return "bg-green-500 text-white";
  if (!a && !b) return "bg-gray-400 text-gray-100";
  return "bg-orange-400 text-white";
};

const CardSkeleton = () => (
  <Card className="border rounded-lg shadow-md animate-pulse">
    <div className="h-10 bg-gray-50/60 border-b" />
    <CardContent className="p-3">
      <div className="grid grid-cols-3 sm:grid-cols-4 gap-1.5">
        {Array.from({ length: 17 }).map((_, i) => (
          <div key={i} className="h-8 bg-gray-200 rounded" />
        ))}
      </div>
    </CardContent>
  </Card>
);

export default function TennisCourtList() {
  const searchParams = useSearchParams();
  // const posthog = usePostHog();
  const [courts, setCourts] = useState<TennisCourt[]>([]);
  const [fav, setFav] = useState<number[]>([]);
  const [search, setSearch] = useState("");
  const [amenities, setAmenities] = useState<Record<AmenityKey, boolean>>({
    lights: false,
    hitting_wall: false,
    pickleball_lined: false,
    ball_machine: false,
  });
  const [popFilter, setPopFilter] = useState<PopFilter>(null);
  const [expanded, setExpanded] = useState<number[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [about, setAbout] = useState(false);
  const [qrCourtFilter, setQrCourtFilter] = useState<string | null>(null);

  // Check for court parameter from QR code on mount
  useEffect(() => {
    const courtParam = searchParams.get('court');
    if (courtParam) {
      console.log(`🎾 QR court filter detected: ${courtParam}`);
      setSearch(courtParam);
      setQrCourtFilter(courtParam);
      // Log that user came from QR code
      logEvent('qr_court_filter_applied', { courtName: courtParam });
    }
  }, [searchParams]);

  const clearQrFilter = () => {
    setSearch("");
    setQrCourtFilter(null);
    logEvent('qr_court_filter_cleared');
  };

  useEffect(() => {
    getTennisCourts()
      .then((data) => {
        setCourts(data);
        logEvent("view_court_list", { courtCount: data.length });
      })
      .catch((e) => setError(e.message))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("favoriteCourts");
      if (raw) setFav(JSON.parse(raw));
    } catch {/* ignore */ }
  }, []);
  const toggleFav = (id: number) =>
    setFav((prev) => {
      const next = prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id];
      localStorage.setItem("favoriteCourts", JSON.stringify(next));
      return next;
    });

  useEffect(() => {
    if (search.trim() && !qrCourtFilter) {
      // Only log manual search, not QR filter
      const timeout = setTimeout(() => {
        logEvent("search_courts", { query: search.trim() });
      }, 500);
      return () => clearTimeout(timeout);
    }
  }, [search, qrCourtFilter]);

  useEffect(() => {
    // Use enhanced filter tracking that only logs meaningful changes
    FilterEventTracker.trackFilterChange(amenities, popFilter);
  }, [amenities, popFilter]);

  const median = useMemo(() => {
    const s = courts
      .map((c) => c.avg_busy_score_7d)
      .filter((x): x is number => x !== null && x > 0)
      .sort((a, b) => a - b);
    return s.length ? s[Math.floor(s.length / 2)] : 0;
  }, [courts]);

  const list = useMemo(() => {
    return courts
      .filter((c) =>
        search ? courtMatchesSearch(c.title, search) : true
      )
      .filter((c) =>
        (Object.keys(amenities) as AmenityKey[]).every(
          (k) => !amenities[k] || c[k]
        )
      )
      .filter((c) => {
        const score = c.avg_busy_score_7d;
        if (popFilter === null) return true;
        if (popFilter === "walk") return score === 0;
        if (score === null || score === 0) return false;
        return score > median;
      })
      .sort((a, b) => {
        const af = fav.includes(a.id) ? 1 : 0;
        const bf = fav.includes(b.id) ? 1 : 0;
        if (af !== bf) return bf - af;
        return a.title.localeCompare(b.title);
      });
  }, [courts, search, amenities, popFilter, fav, median]);

  const today = new Date().toLocaleDateString("en-US", {
    weekday: "long",
    month: "long",
    day: "numeric",
    timeZone: "America/Los_Angeles",
  });
  const amenityCfg: Record<AmenityKey, { label: string; icon: string }> = {
    lights: { label: "Lights", icon: "/icons/lighticon.png" },
    hitting_wall: { label: "Wall", icon: "/icons/wallicon.png" },
    pickleball_lined: { label: "Pickleball", icon: "/icons/pickleballicon.png" },
    ball_machine: { label: "Machine", icon: "/icons/ballmachine.png" },
  };

  const handleExpand = (courtId: number, title: string) => {
    setExpanded((e) =>
      e.includes(courtId) ? e.filter((x) => x !== courtId) : [...e, courtId]
    );
    
    // Track as high-value engagement action
    EngagementTracker.trackHighValueAction("court_detail_expand", courtId, title);
  };

  if (loading) return <div className="p-4"><CardSkeleton /></div>;
  if (error) return <div className="p-6 text-red-600">Error: {error}</div>;

  return (
    <div className="p-4 space-y-4">
      {about && <AboutUs isOpen={about} onClose={() => setAbout(false)} />}

      <div className="sticky top-0 z-10 bg-white border-b pb-3 pt-6 space-y-3">
        <div className="text-xl font-semibold">{today}</div>

        {/* QR Filter Notice */}
        {qrCourtFilter && (
          <div className="rounded-lg bg-blue-50 border border-blue-200 p-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-600 rounded-full"></div>
                <span className="text-sm font-medium text-blue-900">
                  Showing courts for: <strong>{qrCourtFilter}</strong>
                </span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearQrFilter}
                className="text-blue-700 hover:text-blue-900 h-auto p-1"
              >
                <X size={16} />
              </Button>
            </div>
            <p className="text-xs text-blue-700 mt-1">
              Clear filter to see all courts
            </p>
          </div>
        )}

        <div className="flex gap-2 items-center">
          <input
            value={search}
            onChange={(e) => {
              const searchValue = e.target.value;
              setSearch(searchValue);
              
              // Track search events
              // if (searchValue.length > 2) {
              //   posthog.capture('court_search', {
              //     search_term: searchValue,
              //     results_count: courts.filter(c => 
              //       courtMatchesSearch(c.title, searchValue)
              //     ).length
              //   });
              // }
              
              // Clear QR filter state when user manually types
              if (qrCourtFilter && searchValue !== qrCourtFilter) {
                setQrCourtFilter(null);
              }
            }}
            placeholder="Search courts…"
            className="flex-1 p-2 border rounded"
          />
          <Button
            variant="outline"
            size="sm"
            className="p-2 flex items-center gap-0 sm:px-3 sm:gap-1"
            onClick={() => setAbout(true)}
          >
            <Info size={18} />
            <span className="hidden sm:inline">Info</span>
          </Button>
        </div>

        <div className="grid grid-cols-3 gap-2 sm:flex sm:flex-wrap sm:gap-2">
          {(Object.entries(amenityCfg) as [
            AmenityKey,
            { label: string; icon: string }
          ][]).map(([k, { label, icon }]) => {
            const active = amenities[k];
            return (
              <Button
                key={k}
                variant="outline"
                className={`flex items-center justify-center gap-1 text-sm ${
                  active
                    ? "bg-blue-100 text-blue-800 border-blue-300 ring-1 ring-blue-300"
                    : "bg-transparent"
                }`}
                onClick={() => {
                  const newValue = !amenities[k];
                  setAmenities((f) => ({ ...f, [k]: newValue }));
                  
                  // Track filter usage
                  // posthog.capture('court_filter_clicked', {
                  //   filter_type: k,
                  //   filter_value: newValue,
                  //   active_filters: Object.entries({...amenities, [k]: newValue})
                  //     .filter(([, v]) => v)
                  //     .map(([key]) => key)
                  // });
                }}
                aria-pressed={active}
              >
                <Image src={icon} alt="" width={14} height={14} />
                {label}
              </Button>
            );
          })}

          {([
            ["walk", "Walk-on only", Footprints],
            ["low", "Easy walk-on", ThumbsUp],
          ] as const).map(([key, label, Icon]) => {
            const active = popFilter === key;
            return (
              <Button
                key={key}
                variant="outline"
                className={`flex items-center justify-center gap-1 text-sm ${
                  active
                    ? "bg-blue-100 text-blue-800 border-blue-300 ring-1 ring-blue-300"
                    : "bg-transparent"
                }`}
                onClick={() =>
                  setPopFilter(active ? null : (key as PopFilter))
                }
                aria-pressed={active}
              >
                <Icon size={14} />
                {label}
              </Button>
            );
          })}
        </div>
      </div>

      {list.length === 0 ? (
        <div>No courts found.</div>
      ) : (
        list.map((court) => (
          <Card key={court.id} className="border rounded-lg shadow-sm">
            <div className="flex justify-between items-start p-3 bg-gray-50">
              <h3 className="font-semibold">{court.title}</h3>
              <Button variant="ghost" onClick={() => toggleFav(court.id)}>
                <Star
                  size={18}
                  fill={fav.includes(court.id) ? "currentColor" : "none"}
                />
              </Button>
            </div>

            <CardContent className="space-y-3 p-3">
              <div className="flex flex-wrap gap-x-3 gap-y-1 text-xs text-gray-600">
                {court.lights && <div className="flex items-center gap-1"><Image src="/icons/lighticon.png" alt="" width={12} height={12} />Lights</div>}
                {court.pickleball_lined && <div className="flex items-center gap-1"><Image src="/icons/pickleballicon.png" alt="" width={12} height={12} />Pickleball</div>}
                {court.hitting_wall && <div className="flex items-center gap-1"><Image src="/icons/wallicon.png" alt="" width={12} height={12} />Wall</div>}
                {court.ball_machine && <div className="flex items-center gap-1"><Image src="/icons/ballmachine.png" alt="" width={12} height={12} />Machine</div>}
              </div>

              <div className="grid grid-cols-3 sm:grid-cols-4 gap-1">
                {TIME.map((t) => (
                  <div
                    key={t}
                    className={`text-center py-1 rounded text-xs ${slotClr(court, t)}`}
                  >
                    {t.replace(":00", "")}
                  </div>
                ))}
              </div>

              {(court.address || court.Maps_url) && (
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full flex items-center justify-center gap-1.5"
                  onClick={() => handleExpand(court.id, court.title)}
                >
                  <MapPin size={14} />
                  {expanded.includes(court.id) ? "Hide Location" : "Show Location"}
                </Button>
              )}

              {expanded.includes(court.id) && (
                <div className="mt-2">
                  <p className="text-sm text-gray-700 mb-2">
                    {court.address ?? "Address unavailable"}
                  </p>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    onClick={() => {
                      // Enhanced maps tracking with engagement context
                      EngagementTracker.trackHighValueAction("open_maps", court.id, court.title);
                      
                      // PostHog tracking
                      // posthog.capture('court_maps_opened', {
                      //   court_id: court.id,
                      //   court_name: court.title,
                      //   has_address: !!court.address,
                      //   has_maps_url: !!court.Maps_url
                      // });
                      
                      window.open(mapsUrl(court), "_blank");
                    }}
                  >
                    Open in Google Maps
                  </Button>
                </div>
              )}

              {court.ball_machine && (
                <Button
                  size="sm"
                  className="w-full bg-blue-800 text-white hover:bg-blue-900 flex items-center justify-center gap-1.5"
                  onClick={() => {
                    // Track ball machine as high conversion intent action
                    EngagementTracker.trackHighValueAction("ball_machine_click", court.id, court.title);
                    window.open("https://seattleballmachine.com", "_blank");
                  }}
                >
                  <Image src="/icons/ballmachine.png" alt="" width={12} height={12} />
                  Ball Machine Rental
                </Button>
              )}
            </CardContent>
          </Card>
        ))
      )}
    </div>
  );
}
</file>

<file path="src/components/AnalyticsDashboard.tsx">
"use client";

import React, { useState, useEffect } from 'react';
import { OfferConfig } from '@/lib/offerExperiments';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { OfferExperimentManager } from '@/lib/offerExperiments';

interface AnalyticsData {
  totalEvents: number;
  paywallReaches: number;
  conversions: number;
  conversionRate: number;
  offerBreakdown: Record<string, number>;
  engagementMetrics: {
    averageSessionDepth: number;
    highIntentActions: number;
    mapClicks: number;
  };
}

export default function AnalyticsDashboard() {
  const [isVisible, setIsVisible] = useState(false);
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);
  const [currentExperiment, setCurrentExperiment] = useState<OfferConfig | null>(null);

  // Only show in development or for admin users
  useEffect(() => {
    const isDev = process.env.NODE_ENV === 'development';
    const isAdmin = localStorage.getItem('isAdmin') === 'true';
    setIsVisible(isDev || isAdmin);
  }, []);

  useEffect(() => {
    if (isVisible) {
      // Get current experiment info
      const experimentInfo = OfferExperimentManager.getExperimentMetrics();
      setCurrentExperiment(experimentInfo.currentOffer);
      
      // In a real implementation, you'd fetch this from your analytics API
      // For now, show simulated data based on current setup
      setAnalyticsData({
        totalEvents: 1247,
        paywallReaches: 156,
        conversions: 23,
        conversionRate: 14.7,
        offerBreakdown: {
          'five_days_50_off': 78,
          'two_week_trial': 78,
        },
        engagementMetrics: {
          averageSessionDepth: 3.2,
          highIntentActions: 89,
          mapClicks: 45,
        },
      });
    }
  }, [isVisible]);

  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <Card className="w-80 bg-white shadow-lg border-2 border-blue-200">
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-blue-800">
            📊 Analytics Dashboard
          </CardTitle>
        </CardHeader>
        
        <CardContent className="space-y-3 text-xs">
          {/* Current Experiment */}
          <div className="p-2 bg-blue-50 rounded">
            <div className="font-medium text-blue-900">Current Experiment</div>
            <div className="text-blue-700">
              Offer: {currentExperiment?.name || 'Loading...'}
            </div>
            <div className="text-blue-600">
              Progress: Loading...
            </div>
            <div className="text-blue-600">
              Days remaining: Loading...
            </div>
          </div>

          {/* Key Metrics */}
          {analyticsData && (
            <>
              <div className="grid grid-cols-2 gap-2">
                <div className="p-2 bg-green-50 rounded text-center">
                  <div className="font-medium text-green-900">Conversions</div>
                  <div className="text-lg font-bold text-green-700">
                    {analyticsData.conversions}
                  </div>
                </div>
                <div className="p-2 bg-orange-50 rounded text-center">
                  <div className="font-medium text-orange-900">Rate</div>
                  <div className="text-lg font-bold text-orange-700">
                    {analyticsData.conversionRate}%
                  </div>
                </div>
              </div>

              {/* Offer Performance */}
              <div className="p-2 bg-gray-50 rounded">
                <div className="font-medium text-gray-900 mb-1">Offer A/B Test</div>
                {Object.entries(analyticsData.offerBreakdown).map(([offer, count]) => (
                  <div key={offer} className="flex justify-between text-gray-700">
                    <span>{offer.replace('_', ' ')}</span>
                    <span>{count} users</span>
                  </div>
                ))}
              </div>

              {/* Engagement */}
              <div className="p-2 bg-purple-50 rounded">
                <div className="font-medium text-purple-900 mb-1">Engagement</div>
                <div className="text-purple-700">
                  Avg session depth: {analyticsData.engagementMetrics.averageSessionDepth}
                </div>
                <div className="text-purple-700">
                  High intent actions: {analyticsData.engagementMetrics.highIntentActions}
                </div>
                <div className="text-purple-700">
                  Maps clicked: {analyticsData.engagementMetrics.mapClicks}
                </div>
              </div>

              {/* Quick Actions */}
              <div className="flex gap-1">
                <Button 
                  size="sm" 
                  variant="outline" 
                  className="text-xs flex-1"
                  onClick={() => {
                    console.log('Current experiment metrics:', currentExperiment);
                    console.log('Analytics data:', analyticsData);
                  }}
                >
                  Log Data
                </Button>
                <Button 
                  size="sm" 
                  variant="outline" 
                  className="text-xs flex-1"
                  onClick={() => {
                    localStorage.removeItem('offer_cohort_assignment');
                    window.location.reload();
                  }}
                >
                  Reset
                </Button>
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/check-membership/page.tsx">
/* --------------------------------------------------------------------------
   /check-membership
   --------------------------------------------------------------------------
   • Forces sign-in
   • Queries /api/member-status
   • Routes:
       ─ active | trial   → /members
       ─ inactive | error → /paywall
   -------------------------------------------------------------------------- */

import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';
import { cookies }                     from 'next/headers';
import { redirect }                    from 'next/navigation';

export default async function CheckMembershipPage(): Promise<never> {
  const supabase = createServerComponentClient({ cookies });

  /* ---------- 1️⃣  require authentication ------------------------------ */
  const { data: { user }, error } = await supabase.auth.getUser();
  if (error || !user?.email) redirect('/login');

  /* ---------- 2️⃣  membership lookup ----------------------------------- */
  try {
    const res = await fetch(
      `/api/member-status?email=${encodeURIComponent(user.email)}`,
      { cache: 'no-store' },              // never cache auth checks
    );

    if (!res.ok) redirect('/signup');

    const { isMember } = (await res.json()) as { isMember: boolean };

    /* ---------- 3️⃣  route --------------------------------------------- */
    redirect(isMember ? '/members' : '/signup');
  } catch {
    /* network / JSON error → safest fallback */
    redirect('/signup');
  }
}
</file>

<file path="src/lib/offerExperiments.ts">
// Offer experiment management and tracking
import { ConversionTracker, PaywallAnalytics } from '@/lib/eventLogging';
import { logEvent } from '@/lib/logEvent';

export interface OfferConfig {
  id: string;
  name: string;
  freeTrialDays: number;
  discount?: {
    percentage: number;
    duration: string; // e.g., "first_month", "first_3_months"
  };
  trialType: 'anonymous_views' | 'full_trial';
  description: string;
}

export const OFFERS: Record<string, OfferConfig> = {
  // Current experimental offers
  
  FIFTY_PERCENT_OFF_FIRST_MONTH: {
    id: 'fifty_percent_off_first_month',
    name: '50% Off First Month',
    freeTrialDays: 0,
    discount: {
      percentage: 50,
      duration: 'first_month',
    },
    trialType: 'full_trial',
    description: 'Get 50% off your first month when you subscribe',
  },
  
  THREE_DAY_TRIAL: {
    id: 'three_day_trial',
    name: '3 Free Anonymous Views',
    freeTrialDays: 3,
    trialType: 'anonymous_views',
    description: 'Get 3 free days of court access, then subscribe for unlimited access.',
  },
  
};

class OfferExperimentManager {
  private static COHORT_KEY = 'offer_cohort_assignment';

  // Assign user to an offer cohort
  static assignOfferCohort(): OfferConfig {
    // Check if user already has an assignment
    const existingCohort = localStorage.getItem(this.COHORT_KEY);
    if (existingCohort && OFFERS[existingCohort]) {
      return OFFERS[existingCohort];
    }

    // Assign new cohort based on current experiment
    const currentExperiment = this.getCurrentExperiment();
    const assignedOffer = this.selectOfferForUser(currentExperiment);
    
    // Store assignment persistently
    localStorage.setItem(this.COHORT_KEY, assignedOffer.id);
    
    // Track the assignment
    PaywallAnalytics.trackOfferExperiment(assignedOffer.id, assignedOffer.freeTrialDays);
    
    logEvent('offer_cohort_assigned', {
      offerId: assignedOffer.id,
      offerName: assignedOffer.name,
      experiment: currentExperiment,
      freeTrialDays: assignedOffer.freeTrialDays,
      hasDiscount: !!assignedOffer.discount,
      trialType: assignedOffer.trialType,
    });

    return assignedOffer;
  }

  // Get the current running experiment
  private static getCurrentExperiment(): string {
    // You can change this to switch experiments
    return 'q2_2024_five_days_vs_trial'; // Current experiment name
  }

  // Select offer based on experiment and user
  private static selectOfferForUser(experiment: string): OfferConfig {
    switch (experiment) {
      case 'q2_2024_five_days_vs_trial':
        // All users get 50% off first month
        return OFFERS.FIFTY_PERCENT_OFF_FIRST_MONTH;
        
      case 'gate_days_experiment':
        // All users get 3 days now
        return OFFERS.THREE_DAY_TRIAL;
        
      default:
        return OFFERS.FIFTY_PERCENT_OFF_FIRST_MONTH; // Default fallback
    }
  }

  // Track offer impression when paywall is shown
  static trackOfferImpression() {
    const assignedOffer = this.assignOfferCohort();
    ConversionTracker.trackOfferImpression(assignedOffer.id);
    
    logEvent('offer_impression', {
      offerId: assignedOffer.id,
      offerName: assignedOffer.name,
      context: 'paywall_shown',
      uniqueDays: JSON.parse(localStorage.getItem('fss_days') ?? '[]').length,
      gateDays: Number(localStorage.getItem('fss_gate') ?? 3),
    });
  }

  // Track conversion funnel for offers
  static trackOfferConversion(stage: 'click_cta' | 'start_checkout' | 'complete_signup', planType?: string) {
    const assignedOffer = this.getAssignedOffer();
    if (!assignedOffer) return;

    logEvent('offer_conversion_funnel', {
      stage,
      offerId: assignedOffer.id,
      offerName: assignedOffer.name,
      planType,
      freeTrialDays: assignedOffer.freeTrialDays,
      hasDiscount: !!assignedOffer.discount,
      discountPercentage: assignedOffer.discount?.percentage,
      timestamp: new Date().toISOString(),
    });
  }

  // Get the user's assigned offer
  static getAssignedOffer(): OfferConfig | null {
    const cohortId = localStorage.getItem(this.COHORT_KEY);
    return cohortId && OFFERS[cohortId] ? OFFERS[cohortId] : null;
  }

  // Analytics helper: Get conversion metrics for experiments
  static getExperimentMetrics() {
    // This would typically query your analytics database
    // For now, just return the current user's assignment for debugging
    const assignedOffer = this.getAssignedOffer();
    const uniqueDays = JSON.parse(localStorage.getItem('fss_days') ?? '[]').length;
    const gateDays = Number(localStorage.getItem('fss_gate') ?? 3);
    
    return {
      currentOffer: assignedOffer,
      progressToPaywall: uniqueDays / gateDays,
      daysRemaining: Math.max(0, gateDays - uniqueDays),
      hasReachedPaywall: uniqueDays >= gateDays,
    };
  }
}

export { OfferExperimentManager };
</file>

<file path="src/app/api/member-status/route.ts">
import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url)
  const email = searchParams.get('email')

  if (!email) {
    return NextResponse.json({ isMember: false, error: 'email missing' }, { status: 400 })
  }

  /* ----- service-role client (bypasses RLS) ----------------------------- */
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    { auth: { autoRefreshToken: false, persistSession: false } },
  )

  const { data, error } = await supabase
    .from('subscribers')
    .select('status')
    .eq('email', email)
    .single()

  if (error) {
    // don't leak PostgREST codes to client
    return NextResponse.json({ isMember: false }, { status: 500 })
  }

  const isMember = data?.status === 'active' || data?.status === 'trialing' || data?.status === 'paid'
  return NextResponse.json({ isMember })
}
</file>

<file path="src/app/checkout-success/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
// import { usePostHog } from 'posthog-js/react';
import Image from 'next/image';
import { logEvent } from '@/lib/logEvent';
import { ConversionTracker } from '@/lib/eventLogging';

export default function CheckoutSuccessPage() {
  const router = useRouter();
  // const posthog = usePostHog();
  const [countdown, setCountdown] = useState(5); // Increased to 5 seconds
  
  useEffect(() => {
    console.log('✅ CHECKOUT SUCCESS PAGE LOADED');
    
    // Track successful signup completion
    logEvent('signup_completed', {
      timestamp: new Date().toISOString(),
      userJourneyStage: 'conversion',
      conversionIntent: 'subscribing',
    });
    
    // PostHog conversion tracking
    // posthog.capture('checkout_completed', {
    //   timestamp: new Date().toISOString(),
    //   conversion_type: 'subscription',
    //   page: 'checkout_success'
    // });
    
    // Enhanced conversion tracking
    ConversionTracker.trackOfferImpression('checkout_success');
    
    // Show success message for 5 seconds, then redirect
    const timer = setInterval(() => {
      setCountdown((prev) => {
        console.log(`⏰ Countdown: ${prev}`);
        if (prev <= 1) {
          clearInterval(timer);
          console.log('🔄 Redirecting to login...');
          router.replace('/login?redirect_to=/members&from=checkout');
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => {
      console.log('🧹 Cleanup timer');
      clearInterval(timer);
    };
  }, [router]); // , posthog]);
  
  const handleSignInNow = () => {
    console.log('👆 Manual sign in button clicked');
    router.replace('/login?redirect_to=/members&from=checkout');
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-white flex items-center justify-center px-4">
      <div className="max-w-md w-full text-center">
        <div className="flex justify-center mb-8">
          <Image
            src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
            alt="First Serve Seattle Logo"
            width={80}
            height={80}
            priority
          />
        </div>
        
        <div className="rounded-full bg-green-100 w-20 h-20 flex items-center justify-center mx-auto mb-6">
          <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        </div>
        
        <h1 className="text-4xl font-bold text-gray-900 mb-4">🎉 Success!</h1>
        <p className="text-xl text-gray-600 mb-2">Your trial is active!</p>
        <p className="text-lg text-gray-600 mb-8">Welcome to First Serve Seattle</p>
        
        <div className="bg-white rounded-lg border-2 border-green-200 p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">✅ Next Step</h2>
          <p className="text-gray-600 mb-4">Click below to sign in and start using your account</p>
          <p className="text-lg font-bold text-green-600">Auto-redirecting in {countdown} seconds</p>
        </div>
        
        <button
          onClick={handleSignInNow}
          className="w-full bg-[#0c372b] text-white py-4 px-6 rounded-lg font-bold text-lg hover:bg-[#0c372b]/90 transition-colors"
        >
          Sign In Now →
        </button>
        
        <p className="text-sm text-gray-500 mt-4">If you&apos;re seeing this page, the checkout worked!</p>
      </div>
    </div>
  );
}
</file>

<file path="src/app/components/SocialAuthButtons.tsx">
"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

interface SocialAuthButtonsProps {
  redirectTo?: string;
  mode: 'login' | 'signup';
  disabled?: boolean;
}

export default function SocialAuthButtons({ 
  redirectTo,
  mode,
  disabled = false 
}: SocialAuthButtonsProps) {
  const supabase = createClientComponentClient();

  const handleAppleSignIn = async () => {
    console.log(`🍎 Apple sign-in initiated (${mode} mode)`);
    
    // For signup mode, redirect to signup page to complete Stripe checkout
    // For login mode, redirect to members page
    const finalRedirect = mode === 'signup' ? '/signup' : (redirectTo || '/members');
    
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/auth/callback?redirect_to=${encodeURIComponent(finalRedirect)}&mode=${mode}`
      }
    });

    if (error) {
      console.error('Apple sign-in error:', error);
    }
  };

  return (
    <div className="space-y-3">
      <button
        onClick={handleAppleSignIn}
        disabled={disabled}
        className="w-full flex items-center justify-center gap-3 bg-black text-white py-3 px-4 rounded-lg font-medium hover:bg-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg 
          width="20" 
          height="20" 
          viewBox="0 0 24 24" 
          fill="currentColor"
        >
          <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
        </svg>
        Continue with Apple
      </button>
      
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-gray-300" />
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-white text-gray-500">or</span>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/layout.tsx">
/* -------------------------------------------------------------------------- */
/*  src/app/layout.tsx                                                        */
/*  - Force-unregister any legacy service-worker (before React or SW caches)  */
/*  - Run anonymous-ID and localStorage repair boot-straps                    */
/* -------------------------------------------------------------------------- */

import type { ReactNode } from 'react';
import { Analytics } from '@vercel/analytics/react';
import { SpeedInsights } from '@vercel/speed-insights/next';
import Script from 'next/script';

import SiteFooter from '../components/SiteFooter';
import ClientIdsInit from '../components/ClientIdsInit';
import ClientStorageInit from '../components/ClientStorageInit';
// import { PostHogProvider } from '../components/PostHogProvider';

import './globals.css';

export const metadata = {
  title: 'First Serve Seattle',
  description: "Today's Open Tennis and Pickleball Courts",
};

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className="scroll-smooth">
      <head>
        {/* ---------------------------------------------------------------- */}
        {/*  HARD KILL: unregister any existing SW, then register a dummy one */}
        {/*  and immediately unregister it; guarantees full removal even if  */}
        {/*  a previous SW blocked getRegistrations().                        */}
        {/* ---------------------------------------------------------------- */}
        <Script id="sw-kill" strategy="beforeInteractive">
          {`
            if ('serviceWorker' in navigator) {
              // 1. Unregister any current SWs we can see
              navigator.serviceWorker.getRegistrations()
                .then(regs => regs.forEach(r => r.unregister()))
                .catch(() => {});

              // 2. Register a no-op worker, then immediately unregister it.
              //    This removes controllers the firstRegistrations call can't reach.
              navigator.serviceWorker
                .register('/sw-kill.js', { scope: '/' })
                .then(r => r.unregister())
                .catch(() => {});
            }
          `}
        </Script>
      </head>

      <body className="flex min-h-screen flex-col">
        {/* <PostHogProvider> */}
          {/* ---------- client boot-straps ---------------------------------- */}
          <ClientIdsInit />
          <ClientStorageInit />
          {/* <MaintenanceModal /> */}

          {/* ---------- 3rd-party analytics -------------------------------- */}
          <Script
            src="https://datafa.st/js/script.js"
            data-website-id="67e42faaad4cc8e626767b22"
            data-domain="firstserveseattle.com"
            strategy="afterInteractive"
          />

          {/* ---------- Main content --------------------------------------- */}
          <main className="flex-grow">{children}</main>

          {/* ---------- Footer & Vercel analytics -------------------------- */}
          <SiteFooter />
          <Analytics />
          <SpeedInsights />
        {/* </PostHogProvider> */}
      </body>
    </html>
  );
}
</file>

<file path="package.json">
{
  "name": "firstserve",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "mail-missing-cards": "ts-node --transpile-only scripts/mailMissingCards.ts"
  },
  "dependencies": {
    "@napi-rs/canvas": "^0.1.70",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.2.4",
    "@sendgrid/mail": "^8.1.4",
    "@stripe/stripe-js": "^5.4.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.49.4",
    "@vercel/analytics": "^1.4.1",
    "@vercel/speed-insights": "^1.2.0",
    "clsx": "^2.1.1",
    "dotenv": "^16.5.0",
    "jsdom": "^26.1.0",
    "json2csv": "6.0.0-alpha.2",
    "jsonwebtoken": "^9.0.2",
    "next": "15.1.3",
    "nodemailer": "^7.0.3",
    "pg": "^8.16.0",
    "posthog-js": "^1.257.0",
    "posthog-node": "^5.3.1",
    "qr-code-styling-node": "^1.5.0",
    "qrcode": "^1.5.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sharp": "^0.34.2",
    "stripe": "^17.7.0",
    "zod": "^3.25.32"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@radix-ui/react-icons": "^1.3.2",
    "@shadcn/ui": "^0.0.4",
    "@types/node": "^20.17.32",
    "@types/nodemailer": "^6.4.17",
    "@types/pg": "^8.11.10",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "class-variance-authority": "^0.7.1",
    "eslint": "^9.0.0",
    "eslint-config-next": "15.1.3",
    "lucide-react": "^0.469.0",
    "postcss": "^8.0.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss": "^3.4.1",
    "tailwindcss-animate": "^1.0.7",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "description": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).",
  "main": "generate-apple-secret.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rrh1441/firstserveseattle.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/rrh1441/firstserveseattle/issues"
  },
  "homepage": "https://github.com/rrh1441/firstserveseattle#readme"
}
</file>

<file path="src/app/members/page.tsx">
/* -------------------------------------------------------------------------- */
/*  src/app/members/page.tsx                                                  */
/* -------------------------------------------------------------------------- */

'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import Image from 'next/image';
import { ExternalLink } from 'lucide-react';

import TennisCourtList from '../tennis-courts/components/TennisCourtList';
import { Button } from '@/components/ui/button';

/* ---------- tiny fetcher hits the server-side API, not Supabase ---------- */
async function fetchMemberStatus(email: string | null | undefined) {
  if (!email) return false;
  try {
    const r = await fetch(`/api/member-status?email=${encodeURIComponent(email)}`, {
      cache: 'no-store',
    });
    if (!r.ok) return false;
    const { isMember } = (await r.json()) as { isMember: boolean };
    return isMember === true;
  } catch {
    return false;
  }
}

export default function MembersPage() {
  const router   = useRouter();
  const supabase = createClientComponentClient();

  const [checking, setChecking]     = useState(true);
  const [error,    setError]        = useState<string | null>(null);
  const [token,    setToken]        = useState<string | null>(null);
  const [loadingPortal, setLP]      = useState(false);

  console.log('🏠 Members page component loaded');

  /* ---------------- session + membership gate ---------------- */
  useEffect(() => {
    console.log('🔄 Members page useEffect running...');
    (async () => {
      try {
        console.log('🧪 Checking session...');
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          console.log('❌ No session found, redirecting to login');
          router.replace(`/login?redirect_to=${encodeURIComponent(window.location.pathname)}`);
          return;
        }
        console.log('✅ Session found for:', session.user.email);
        setToken(session.access_token);

        console.log('🧪 Checking membership status...');
        const ok = await fetchMemberStatus(session.user.email);
        console.log('📊 Membership status:', ok);
        if (!ok) {
          console.log('❌ No membership found, redirecting to paywall');
          router.replace('/signup');
          return;
        }
        console.log('✅ Membership confirmed, showing members content');
      } catch (e) {
        console.error('💥 Error in members page:', e);
        setError(e instanceof Error ? e.message : String(e));
      } finally {
        console.log('🏁 Members page check complete');
        setChecking(false);
      }
    })();
  }, [router, supabase]);

  /* ---------------- customer-portal handler ------------------ */
  async function manageSub() {
    if (!token) { setError('No session'); return; }
    setLP(true);
    try {
      const r = await fetch('/api/create-portal-link', {
        method : 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization : `Bearer ${token}`,
        },
      });
      if (!r.ok) throw new Error(await r.text());
      const { url } = (await r.json()) as { url: string };
      window.location.href = url;
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Portal error');
    } finally {
      setLP(false);
    }
  }

  /* ---------------------------- UI --------------------------- */
  if (checking) {
    return <div className="flex min-h-screen items-center justify-center">Checking membership…</div>;
  }
  if (error) {
    return (
      <div className="container mx-auto p-4 text-center">
        <p className="rounded border border-red-300 bg-red-100 p-4 text-red-500">
          {error} — please refresh or contact support.
        </p>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-4xl bg-white px-4 pt-8 pb-6 md:pt-10 md:pb-8">
      {/* header */}
      <header className="mb-8 flex flex-col items-center gap-4 md:flex-row md:justify-between">
        <div className="flex items-center gap-6">
          <Image
            src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
            alt="First Serve Seattle"
            width={80}
            height={80}
            priority
          />
          <div>
            <h1 className="mb-1 text-3xl font-extrabold text-[#0c372b] md:text-4xl">
              First&nbsp;Serve&nbsp;Seattle
            </h1>
            <p className="text-base font-semibold md:text-lg">
              Today&apos;s Open Tennis &amp; Pickleball Courts
            </p>
          </div>
        </div>

        <Button
          onClick={manageSub}
          className="w-full whitespace-nowrap bg-[#0c372b] text-white hover:bg-[#0c372b]/90 md:w-auto"
          disabled={loadingPortal}
        >
          {loadingPortal ? 'Loading…' : 'Manage Subscription'}
        </Button>
      </header>

      <TennisCourtList />

      <div className="mt-8 space-y-3 text-center sm:space-y-0 sm:space-x-4">
        <Button asChild className="w-full gap-2 sm:w-auto">
          <a
            href="https://anc.apm.activecommunities.com/seattle/reservation/search?facilityTypeIds=39%2C115&resourceType=0&equipmentQty=0"
            target="_blank"
            rel="noopener noreferrer"
          >
            Book Future Reservations <ExternalLink className="h-4 w-4" />
          </a>
        </Button>
        <Button asChild className="w-full gap-2 sm:w-auto">
          <a
            href="http://www.tennis-seattle.com?From=185415"
            target="_blank"
            rel="noopener noreferrer"
          >
            Join a Local League <ExternalLink className="h-4 w-4" />
          </a>
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="src/app/tennis-courts/components/paywall.tsx">
"use client";

import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import Link from "next/link";
import { PlanSelector } from "@/components/PlanSelector";
import { logEvent } from "@/lib/logEvent";
import { shouldShowPaywall } from "@/lib/shouldShowPaywall";

const features = [
  "See today's availability for ALL public courts",
  "Filter courts by lights, pickleball lines, hitting walls",
  "Save your favorite courts for quick access",
  "Unlimited court views",
  "Priority customer support",
];

const headlines = [
  { group: "A", text: "Stop guessing, start playing!" },
  { group: "B", text: "Never drive to a full court again!" },
];

export default function PaywallPage() {
  const [canShow, setCanShow] = useState<boolean | null>(null);
  const [assignedOffer, setAssignedOffer] = useState<{ id: string; discount?: { percentage: number } } | null>(null);
  const [plan, setPlan] = useState<"monthly" | "annual">("monthly");
  const [assignedHeadline, setAssignedHeadline] = useState<{
    group: string;
    text: string;
  } | null>(null);

  useEffect(() => {
    let mounted = true;
    shouldShowPaywall()
      .then((result) => {
        if (mounted) setCanShow(result);
      })
      .catch(() => {
        if (mounted) setCanShow(false);
      });
    return () => {
      mounted = false;
    };
  }, []);

  useEffect(() => {
    if (!canShow) return;
    const randomIndex = Math.random() < 0.5 ? 0 : 1;
    const selectedHeadline = headlines[randomIndex];
    setAssignedHeadline(selectedHeadline);

    logEvent("view_paywall", {
      headlineGroup: selectedHeadline.group,
    });
  }, [canShow]);

  useEffect(() => {
    // Everyone gets the 50% off offer
    const offer = { id: 'fifty_percent_off_first_month', discount: { percentage: 50 } };
    setAssignedOffer(offer);
  }, []);

  const handleSubscribeClick = () => {
    logEvent("click_subscribe_cta", {
      plan,
      headlineGroup: assignedHeadline?.group ?? null,
    });
  };

  if (canShow !== true) return null;

  return (
    <div className="flex items-center justify-center min-h-screen bg-white p-4">
      <Card className="w-full max-w-md border border-gray-200 shadow-lg">
        <CardHeader className="text-center space-y-2">
          <CardTitle className="text-2xl font-bold">
            {assignedHeadline
              ? assignedHeadline.text
              : "You've reached your free limit"}
          </CardTitle>
          <CardDescription className="text-base text-gray-600">
            {assignedOffer?.discount && plan === 'monthly' ? (
              <>Get <span className="font-semibold">{assignedOffer.discount.percentage}% off your first month</span> when you subscribe</>
            ) : plan === 'annual' ? (
              <>Subscribe annually and <span className="font-semibold">save 33%</span> vs monthly billing</>
            ) : (
              <>Subscribe to see <span className="font-semibold">all court availability</span>.</>
            )}
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          <PlanSelector
            selectedPlan={plan}
            onPlanSelect={setPlan}
            features={features}
            assignedOffer={assignedOffer}
          />

          <Link
            href={`/signup?plan=${plan}${
              assignedHeadline ? `&headline_group=${assignedHeadline.group}` : ""
            }&offer_id=fifty_percent_off_first_month`}
            onClick={handleSubscribeClick}
            className="w-full block text-center bg-[#0c372b] text-white py-3 text-lg font-semibold rounded-md hover:bg-[#0c372b]/90 transition-colors focus:outline-none focus:ring-2 focus:ring-[#0c372b] focus:ring-offset-2"
          >
            {plan === "monthly"
              ? "Subscribe – Monthly"
              : "Subscribe – Annual"}
          </Link>

          <p className="text-xs text-center text-gray-500">
            Secure payment powered by Stripe. Cancel anytime.
          </p>

          <div className="text-center mt-4 space-y-2">
            <p className="text-sm text-gray-600">
              Already subscribed?{" "}
              <Link
                href="/login"
                className="font-semibold text-blue-600 hover:underline"
              >
                Sign in here
              </Link>
            </p>
            <p className="text-sm text-gray-600">
              Need help?{" "}
              <a
                href="mailto:support@firstserveseattle.com"
                className="font-semibold text-blue-600 hover:underline"
              >
                Contact support
              </a>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/components/LandingPage.tsx">
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
// import { usePostHog } from "posthog-js/react"
import Image from "next/image"

export default function LandingPage() {
  const [isStarting, setIsStarting] = useState(false)
  const router = useRouter()

  const handleGetStarted = () => {
    setIsStarting(true)
    // Mark that they've seen landing
    localStorage.setItem('fss_seen_landing', 'true')
    // Simple redirect to main page - let it handle paywall logic
    router.push("/")
  }

  const handleSignIn = () => {
    // posthog.capture('landing_signin_clicked')
    router.push("/login")
  }

  const handleSignUp = () => {
    // posthog.capture('landing_signup_clicked')
    router.push("/signup")
  }

  return (
    <div className="min-h-screen bg-white max-w-4xl mx-auto">
      {/* Header */}
      <header className="px-4 py-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Image
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
              alt="First Serve Seattle Logo"
              width={32}
              height={32}
              priority
            />
            <h1 className="text-lg font-semibold text-[#0c372b] md:text-xl">First Serve Seattle</h1>
          </div>
          <div className="flex gap-2">
            <button
              onClick={handleSignIn}
              className="text-sm font-medium text-gray-700 px-3 py-1.5"
            >
              Sign In
            </button>
            <button
              onClick={handleSignUp}
              className="text-sm font-medium text-white bg-[#0c372b] px-4 py-1.5 rounded"
            >
              Sign Up
            </button>
          </div>
        </div>
      </header>

      <main className="px-4 md:px-8">
        {/* Hero */}
        <div className="pt-8 pb-6 text-center md:pt-12 md:pb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-4 md:text-5xl md:mb-6">
            Where can I<br />walk up and play?
          </h2>
          <p className="text-gray-600 text-lg mb-6 md:text-xl md:mb-8 max-w-2xl mx-auto">
            Daily updates on unreserved tennis and pickleball courts.<br />
            No more driving around guessing.
          </p>

          <button
            onClick={handleGetStarted}
            disabled={isStarting}
            className="w-full md:w-auto md:px-12 bg-[#0c372b] text-white py-3.5 px-6 text-base font-medium rounded hover:bg-[#0a2e21] transition-colors disabled:opacity-50"
          >
            {isStarting ? (
              <div className="flex items-center justify-center gap-2">
                <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                Loading courts...
              </div>
            ) : (
              "Try Free for 3 Days"
            )}
          </button>
          <p className="text-sm text-gray-500 mt-2 text-center md:text-base">No credit card required</p>
        </div>

        {/* Trust */}
        <div className="py-4 border-t border-gray-100 text-center md:py-6">
          <p className="text-sm text-gray-600 md:text-base">
            <span className="font-semibold text-gray-900">Used by 2,500+ players</span> every month
          </p>
        </div>

        {/* How it works */}
        <div className="py-6 md:py-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 text-center md:text-2xl md:mb-6">The problem we solve</h3>
          
          <div className="space-y-4 mb-6 max-w-sm mx-auto md:max-w-2xl md:grid md:grid-cols-2 md:gap-8 md:space-y-0">
            <div className="text-center">
              <p className="font-medium text-gray-900">Seattle locks court reservations daily</p>
              <p className="text-sm text-gray-600">You can&apos;t see which courts are actually free for walk-up play</p>
            </div>
            
            <div className="text-center">
              <p className="font-medium text-gray-900">We check every morning at 5 AM</p>
              <p className="text-sm text-gray-600">Know exactly where you can play before you leave home</p>
            </div>
          </div>
        </div>

        {/* Features */}
        <div className="py-6 border-t border-gray-100 md:py-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 text-center md:text-2xl md:mb-6">What you get</h3>
          
          <div className="space-y-3 max-w-xs mx-auto md:max-w-2xl md:grid md:grid-cols-3 md:gap-6 md:space-y-0">
            <div className="flex gap-3">
              <svg className="w-5 h-5 text-[#0c372b] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <div>
                <p className="font-medium text-gray-900">All 100+ Seattle courts</p>
                <p className="text-sm text-gray-600">Tennis and pickleball</p>
              </div>
            </div>
            
            <div className="flex gap-3">
              <svg className="w-5 h-5 text-[#0c372b] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <div>
                <p className="font-medium text-gray-900">Updated by 5 AM daily</p>
                <p className="text-sm text-gray-600">Fresh info every morning</p>
              </div>
            </div>
            
            <div className="flex gap-3">
              <svg className="w-5 h-5 text-[#0c372b] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <div>
                <p className="font-medium text-gray-900">Feature view</p>
                <p className="text-sm text-gray-600">Find courts with lights, pickleball lines, hitting walls, or nearby ball machine rentals</p>
              </div>
            </div>
          </div>
        </div>

        {/* Testimonial */}
        <div className="py-6 border-t border-gray-100 md:py-8">
          <blockquote className="text-gray-700 text-center max-w-sm mx-auto md:max-w-2xl">
            <p className="mb-2 md:text-lg">&quot;Used to waste 30 minutes driving between courts. Now I know exactly where to go.&quot;</p>
            <cite className="text-sm text-gray-600 not-italic md:text-base">— Mike R., Capitol Hill</cite>
          </blockquote>
        </div>

        {/* CTA */}
        <div className="py-6 md:py-8 flex flex-col items-center">
          <button
            onClick={handleGetStarted}
            className="w-full md:w-auto md:px-12 bg-[#0c372b] text-white py-3.5 px-6 text-base font-medium rounded hover:bg-[#0a2e21] transition-colors mb-3"
          >
            Start Free Trial
          </button>
          
          <p className="text-sm text-gray-600 text-center md:text-base">
            $4 first month, then $8/month • Cancel anytime
          </p>
        </div>

        {/* Footer */}
        <div className="py-6 border-t border-gray-100 text-center md:py-8">
          <p className="text-sm text-gray-600 md:text-base">
            Have an account? <button onClick={handleSignIn} className="text-[#0c372b] font-medium">Sign in</button>
          </p>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="src/app/paywall/page.tsx">
/* -------------------------------------------------------------------------- *
   Client-side pay-wall screen
   • Unique-day gate already decided; simply renders.
   • Enhanced with offer experiments and better analytics.
 * -------------------------------------------------------------------------- */

'use client';

import { useEffect, useState } from 'react';
import Link                     from 'next/link';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { PlanSelector }          from '@/components/PlanSelector';

import { shouldShowPaywall }     from '@/lib/shouldShowPaywall';
import { HERO_HEADLINES,
         FEATURES,
         SOCIAL_PROOF }          from '@/lib/paywallCopy';
import { usePaywallAnalytics }   from '@/lib/usePaywallAnalytics';

type Plan = 'monthly' | 'annual';

export default function PaywallPage(): JSX.Element | null {
  /* ---------------- local state --------------------------------------- */
  const [canShow,   setCanShow]   = useState<boolean | null>(null);
  const [plan,      setPlan]      = useState<Plan>('monthly');
  const [headline,  setHeadline]  = useState<{ group: string; text: string }>();
  const [gateDays,  setGateDays]  = useState<number>(0);
  const [assignedOffer, setAssignedOffer] = useState<{ id: string; discount?: { percentage: number; duration: string }; description: string; freeTrialDays: number } | null>(null);

  /* ---------------- gate check ---------------------------------------- */
  useEffect(() => {
    let mounted = true;

    shouldShowPaywall()
      .then(v => mounted && setCanShow(v))
      .catch(() => mounted && setCanShow(false));

    return () => { mounted = false; };
  }, []);

  /* ---------------- sticky A/B headline ------------------------------- */
  useEffect(() => {
    if (!canShow) return;
    const idx     = Math.random() < 0.5 ? 0 : 1;
    const chosen  = HERO_HEADLINES[idx];
    setHeadline(chosen);
    if (typeof window !== 'undefined') {
      localStorage.setItem('abGroup', chosen.group);
    }
  }, [canShow]);

  /* ---------------- offer assignment ---------------------------------- */
  useEffect(() => {
    if (!canShow) return;
    
    // Everyone gets the 50% off offer
    const offer = { 
      id: 'fifty_percent_off_first_month', 
      discount: { percentage: 50, duration: 'first_month' },
      description: 'Get 50% off your first month when you subscribe today.',
      freeTrialDays: 0
    };
    setAssignedOffer(offer);
  }, [canShow]);

  /* ---------------- read gateDays ------------------------------------- */
  useEffect(() => {
    if (typeof window !== 'undefined') {
      setGateDays(Number(localStorage.getItem('fss_gate') ?? '0'));
    }
  }, []);

  /* ---------------- analytics hook ------------------------------------ */
  const { markCTA } = usePaywallAnalytics(headline?.group ?? null, gateDays);

  /* ---------------- CTA handler ---------------------------------------- */
  const handleCTAClick = (selectedPlan: Plan) => {
    // Track analytics
    markCTA(selectedPlan);
  };

  /* ---------------- guard --------------------------------------------- */
  if (canShow !== true) return null;

  /* ---------------- dynamic offer content ----------------------------- */
  const getOfferDescription = () => {
    if (!assignedOffer) return "Subscribe to see all court availability.";
    
    if (assignedOffer.discount && plan === 'monthly') {
      return `Get ${assignedOffer.freeTrialDays} free days, then ${assignedOffer.discount.percentage}% off your ${assignedOffer.discount.duration.replace('_', ' ')}.`;
    }
    
    if (plan === 'annual') {
      return "Subscribe annually and save 33% vs monthly billing.";
    }
    
    return assignedOffer.description;
  };

  const getCtaText = () => {
    if (!assignedOffer || !assignedOffer.discount || plan === 'annual') {
      return plan === 'monthly'
        ? 'Subscribe – Monthly'
        : 'Subscribe – Annual';
    }
    
    // For discount offers on monthly plans only
    return `Get ${assignedOffer.discount.percentage}% Off – Monthly`;
  };

  /* ---------------- UI ------------------------------------------------ */
  return (
    <div className="flex min-h-screen items-center justify-center bg-white p-4">
      <Card className="w-full max-w-md border border-gray-200 shadow-lg">
        <CardHeader className="space-y-2 text-center">
          <CardTitle className="text-2xl font-bold">
            {headline?.text ?? "You've reached your free limit"}
          </CardTitle>

          <CardDescription className="text-base text-gray-600">
            {getOfferDescription()}
          </CardDescription>

          <p className="text-sm text-gray-500">{SOCIAL_PROOF}</p>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* plan selector */}
          <PlanSelector
            selectedPlan={plan}
            onPlanSelect={setPlan}
            features={FEATURES}
          />

          {/* CTA */}
          <Link
            href={`/signup?plan=${plan}&headline_group=${headline?.group ?? ''}&offer_id=fifty_percent_off_first_month`}
            onClick={() => handleCTAClick(plan)}
            aria-label={getCtaText()}
            className="block w-full rounded-md bg-[#0c372b] py-3 text-center text-lg font-semibold text-white transition-colors hover:bg-[#0c372b]/90 focus:outline-none focus:ring-2 focus:ring-[#0c372b] focus:ring-offset-2"
          >
            {getCtaText()}
          </Link>

          <p className="text-xs text-center text-gray-500">
            Secure payment powered by Stripe. Cancel anytime.
          </p>

          {/* footer */}
          <div className="mt-4 space-y-2 text-center">
            <p className="text-sm text-gray-600">
              Already subscribed?{' '}
              <Link
                href="/login"
                className="font-semibold text-blue-600 hover:underline"
              >
                Sign in here
              </Link>
            </p>
            <p className="text-sm text-gray-600">
              Need help?{' '}
              <a
                href="mailto:support@firstserveseattle.com"
                className="font-semibold text-blue-600 hover:underline"
                rel="noopener noreferrer"
              >
                Contact support
              </a>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/app/api/create-checkout-session/route.ts">
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { cookies } from "next/headers";

/* -------------------------------------------------------------------------- */
/*  ENV & constants                                                           */
/* -------------------------------------------------------------------------- */
const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY as string;

const SUCCESS_URL = "https://firstserveseattle.com/checkout-success";
const CANCEL_URL  = "https://firstserveseattle.com/";

const MONTHLY_ID = "price_1Qbm96KSaqiJUYkj7SWySbjU";
const ANNUAL_ID  = "price_1QowMRKSaqiJUYkjgeqLADm4";

/* -------------------------------------------------------------------------- */
/*  POST handler – returns { url }                                            */
/* -------------------------------------------------------------------------- */
export async function POST(request: Request) {
  try {
    const { email, plan, offerId } = (await request.json()) as {
      email?: string;
      plan?: string;
      offerId?: string;
    };

    if (!email || !plan) {
      return NextResponse.json(
        { error: "Missing email or plan." },
        { status: 400 },
      );
    }

    const selectedPlan = plan === "annual" ? "annual" : "monthly";
    const priceId      = selectedPlan === "annual" ? ANNUAL_ID : MONTHLY_ID;

    const stripe = new Stripe(STRIPE_SECRET_KEY);
    const cookieStore = await cookies();

    // Check if this is the 50% off first month offer
    const isDiscountOffer = offerId === 'fifty_percent_off_first_month';
    console.log('API received:', { email, plan, offerId, isDiscountOffer });
    
    
    // Create checkout session with discount instead of trial
    const sessionConfig: Stripe.Checkout.SessionCreateParams = {
      customer_email: email,
      line_items: [{ price: priceId, quantity: 1 }],
      mode: "subscription",
      success_url: SUCCESS_URL,
      cancel_url: CANCEL_URL,
      payment_method_collection: "always",
      metadata: {
        plan: selectedPlan,
        offerId: offerId ?? "default",
        visitorId: cookieStore.get("datafast_visitor_id")?.value ?? null,
        sessionId: cookieStore.get("datafast_session_id")?.value ?? null,
      },
    };

    // Apply 50% discount for first month if applicable (monthly plans only)
    if (isDiscountOffer && selectedPlan === 'monthly') {
      sessionConfig.discounts = [
        {
          promotion_code: 'promo_1R8o3pKSaqiJUYkjLMJ3UX4z',
        }
      ];
      sessionConfig.metadata!.discount_applied = "FIRST50";
    } else {
      // Allow promotion codes
      sessionConfig.allow_promotion_codes = true;
    }

    const session = await stripe.checkout.sessions.create(sessionConfig);

    return NextResponse.json({ url: session.url }, { status: 200 });
  } catch (err) {
    const msg = err instanceof Error ? err.message : String(err);
    console.error("checkout-session error:", msg);
    console.error("Full error:", err);
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}
</file>

<file path="src/app/api/stripe-webhook/route.ts">
/* app/api/stripe-webhook/route.ts
 *
 * Handles all live-mode Stripe web-hooks and mirrors them into the `subscribers`
 * table.  Fully strict-mode compliant: noImplicitAny, strictNullChecks, etc.
 */
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';

export const dynamic = 'force-dynamic'; // disables edge caching for this route

// ──────────────────────────────────────────────────────────────────────────
//  1. Library / client setup
// ──────────────────────────────────────────────────────────────────────────
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-01-27.acacia' as Stripe.LatestApiVersion,
});

const supa = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
);

// Your price IDs
const MONTHLY_ID = 'price_1Qbm96KSaqiJUYkj7SWySbjU';
const ANNUAL_ID  = 'price_1QowMRKSaqiJUYkjgeqLADm4';

// ──────────────────────────────────────────────────────────────────────────
//  2. Helper utilities
// ──────────────────────────────────────────────────────────────────────────
/** True if a customer currently has any default payment method. */
function cardOnFile(cust: Stripe.Customer): boolean {
  return Boolean(
    cust.invoice_settings?.default_payment_method || cust.default_source,
  );
}

/** Upsert row - update by email first, then by stripe_customer_id */
async function upsertSubscriber(fields: {
  stripeCustomerId:     string;
  stripeSubscriptionId?:string;
  email?:               string;
  plan?:                string;
  status?:              Stripe.Subscription.Status | 'expired';
  hasCard?:             boolean;
  trialEnd?:            number | null;
}) {
  console.log('🔄 upsertSubscriber called with:', fields);

  const {
    stripeCustomerId,
    stripeSubscriptionId,
    email,
    plan,
    status,
    hasCard,
    trialEnd,
  } = fields;

  const updateData = {
    stripe_customer_id:     stripeCustomerId,
    stripe_subscription_id: stripeSubscriptionId,
    email,
    plan,
    status,
    has_card:                hasCard,
    trial_end:               trialEnd,
    updated_at:              new Date().toISOString(),
  };

  console.log('📝 updateData:', updateData);

  // Try to update by email first (from signup)
  if (email) {
    console.log('🔍 Looking for existing record by email:', email);
    const { data: existingByEmail, error: emailError } = await supa
      .from('subscribers')
      .select('id')
      .eq('email', email)
      .maybeSingle(); // Use maybeSingle() instead of single() to handle 0 or multiple rows

    console.log('📋 Email lookup result:', { existingByEmail, emailError });

    if (existingByEmail && !emailError) {
      console.log('✅ Found existing record, updating by email');
      const { error: updateError } = await supa
        .from('subscribers')
        .update(updateData)
        .eq('email', email);
      
      if (updateError) {
        console.error('❌ Supabase update by email error:', updateError);
      } else {
        console.log('✅ Successfully updated by email');
      }
      return;
    } else {
      console.log('❌ No existing record found by email, falling back to stripe_customer_id upsert');
    }
  }

  // Fallback to upsert by stripe_customer_id
  console.log('🔄 Upserting by stripe_customer_id:', stripeCustomerId);
  const { error } = await supa
    .from('subscribers')
    .upsert(updateData, { onConflict: 'stripe_customer_id' });

  if (error) {
    console.error('❌ Supabase upsert error:', error);
  } else {
    console.log('✅ Successfully upserted by stripe_customer_id');
  }
}

/** Map Stripe price → internal plan enum. */
function planFromPrice(priceId: string): string {
  if (priceId === MONTHLY_ID) return 'monthly';
  if (priceId === ANNUAL_ID)  return 'annual';
  return 'unknown';
}

// ──────────────────────────────────────────────────────────────────────────
//  3. Route handler
// ──────────────────────────────────────────────────────────────────────────
export async function POST(req: NextRequest) {
  console.log('🔔 Webhook received!');
  
  /* 3-a  Verify webhook signature */
  const rawBody = Buffer.from(await req.arrayBuffer());
  const sig     = req.headers.get('stripe-signature') ?? '';

  let event: Stripe.Event;
  try {
    event = stripe.webhooks.constructEvent(
      rawBody,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET!,
    );
    console.log('✅ Webhook signature verified. Event type:', event.type);
  } catch (err) {
    console.warn('❌ Signature verification failed:', err);
    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });
  }

  /* 3-b  Dispatch by event type */
  try {
    switch (event.type) {
      // ────────────────────── checkout complete ──────────────────────────
      case 'checkout.session.completed': {
        const session  = event.data.object as Stripe.Checkout.Session;
        const custId   = session.customer as string;
        const subId    = session.subscription as string;
        const customer = (await stripe.customers.retrieve(
          custId,
        )) as Stripe.Customer;

        // Get the actual subscription to get the trial_end
        const subscription = await stripe.subscriptions.retrieve(subId);

        await upsertSubscriber({
          stripeCustomerId: custId,
          stripeSubscriptionId: subId,
          email:   customer.email ?? session.customer_details?.email ?? '',
          plan:    planFromPrice(session.metadata?.plan ?? ''),
          status:  'trialing',
          hasCard: true,
          trialEnd: subscription.trial_end ?? null,
        });
        break;
      }

      // ────────────────── subscription updated ───────────────────────────
      case 'customer.subscription.updated': {
        const sub      = event.data.object as Stripe.Subscription;
        const custId   = sub.customer as string;
        const customer = (await stripe.customers.retrieve(
          custId,
        )) as Stripe.Customer;

        await upsertSubscriber({
          stripeCustomerId: custId,
          stripeSubscriptionId: sub.id,
          email:   customer.email ?? '',
          plan:    planFromPrice(sub.items.data[0]?.price.id ?? ''),
          status:  sub.status,
          hasCard: cardOnFile(customer),
          trialEnd: sub.trial_end ?? null,
        });
        break;
      }

      // ──────────────── subscription *deleted* (new branch) ──────────────
      case 'customer.subscription.deleted': {
        const sub    = event.data.object as Stripe.Subscription;
        const custId = sub.customer as string;

        await upsertSubscriber({
          stripeCustomerId:     custId,
          stripeSubscriptionId: sub.id,
          status:               'canceled',
          hasCard:              false,
          trialEnd:             sub.trial_end ?? null,
        });
        break;
      }

      // ─────────────── payment method now attached ───────────────────────
      case 'payment_method.attached': {
        const pm     = event.data.object as Stripe.PaymentMethod;
        const custId = pm.customer as string;

        // Get customer details since payment_method doesn't include email
        const customer = (await stripe.customers.retrieve(custId)) as Stripe.Customer;

        await upsertSubscriber({
          stripeCustomerId: custId,
          email:            customer.email ?? '',
          hasCard:          true,
        });
        break;
      }

      // ─────────────── default PM / e-mail changes ───────────────────────
      case 'customer.updated': {
        const cust = event.data.object as Stripe.Customer;

        await upsertSubscriber({
          stripeCustomerId: cust.id,
          email:            cust.email ?? '',
          hasCard:          cardOnFile(cust),
        });
        break;
      }

      // ─────────── invoice paid or failed updates status ─────────────────
      case 'invoice.payment_succeeded':
      case 'invoice.payment_failed': {
        const inv    = event.data.object as Stripe.Invoice;
        const custId = inv.customer as string;
        const subId  = inv.subscription as string | null;

        // Get customer details since invoice doesn't include email
        const customer = (await stripe.customers.retrieve(custId)) as Stripe.Customer;

        await upsertSubscriber({
          stripeCustomerId:     custId,
          stripeSubscriptionId: subId ?? undefined,
          email:                customer.email ?? '',
          status:               inv.status as Stripe.Subscription.Status,
        });
        break;
      }

      default:
        // No DB action required
    }

    return NextResponse.json({ received: true });
  } catch (err) {
    console.error('Webhook handler error:', err);
    return NextResponse.json({ error: 'handler-failed' }, { status: 500 });
  }
}
</file>

<file path="src/app/login/page.tsx">
/* -------------------------------------------------------------------------- */
/*  src/app/login/page.tsx – client-side sign-in                              */
/*                                                                            */
/*  • After a successful sign-in it looks for ?redirect_to=<path>              */
/*      – if it's a safe, absolute-path link it uses that                     */
/*      – otherwise it falls back to /members                                 */
/*  • Supports email pre-filling via ?email=<email> parameter                 */
/* -------------------------------------------------------------------------- */

'use client';

import { Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import LoginFormClient from './LoginFormClient';

/* -------------------------------------------------------------------------- */
/*  Inner component – needs hooks                                             */
/* -------------------------------------------------------------------------- */
function LoginInner() {
  const searchParams = useSearchParams();

  /* -------- compute safe redirect target (default → /members) ------------ */
  const rawRedirect = searchParams.get('redirect_to');
  const redirectTo =
    rawRedirect &&
    rawRedirect.startsWith('/') &&          // not absolute URL
    !rawRedirect.startsWith('//') &&        // not protocol-relative
    !rawRedirect.includes(':')              // not scheme
      ? rawRedirect
      : '/members';

  /* -------- get email from URL params ------------------------------------ */
  const emailParam = searchParams.get('email') || '';
  const fromCheckout = searchParams.get('from') === 'checkout';

  /* ---------------------------- render ----------------------------------- */
  return <LoginFormClient redirectTo={redirectTo} initialEmail={emailParam} showTrialMessage={fromCheckout} />;
}

/* -------------------------------------------------------------------------- */
/*  Export with Suspense wrapper                                              */
/* -------------------------------------------------------------------------- */
export default function LoginPage() {
  return (
    <Suspense fallback={<div className="min-h-screen" />}>
      <LoginInner />
    </Suspense>
  );
}
</file>

<file path="src/app/page.tsx">
/* --------------------------------------------------------------------------
   Public landing page
   • Anonymous users receive 3 / 5 / 7 free unique days (sticky cohort).
   • On the day *after* that cap, redirect to /paywall.
   -------------------------------------------------------------------------- */

'use client';

import { Suspense, useCallback, useEffect, useState } from 'react';
import { usePathname, useRouter }                     from 'next/navigation';
import Image                                          from 'next/image';

import type { ReactElement } from 'react';
import Paywall             from './tennis-courts/components/paywall';
import TennisCourtList     from './tennis-courts/components/TennisCourtList';
import DaysCounter         from './tennis-courts/components/DaysCounter';
import LandingPage         from './components/LandingPage';

import { shouldShowPaywall, isFirstTimeVisitor } from '@/lib/shouldShowPaywall';
import { logEvent }          from '@/lib/logEvent';
import { useRandomUserId }   from './randomUserSetup';
import { ConversionTracker } from '@/lib/eventLogging';

/* ---------- constants -------------------------------------------------- */
const EXEMPT_PATHS = new Set<string>([
  '/paywall',
  '/reset-password',
  '/login',
  '/signup',
  '/members',
  '/privacy-policy',
  '/terms-of-service',
  '/courts',
  '/request-password-reset',
  '/admin',
]);

const LoadingIndicator = (): ReactElement => (
  <div className="flex min-h-[50vh] items-center justify-center">
    <p className="animate-pulse text-lg text-gray-600">Loading Courts…</p>
  </div>
);

interface ViewState {
  uniqueDays : number;
  gateDays   : number;
  showPaywall: boolean;
}

/* ---------------------------------------------------------------------- */
export default function HomePage(): ReactElement | null {
  const pathname  = usePathname();
  const router    = useRouter();

  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [viewData,  setViewData]  = useState<ViewState | null>(null);

  useRandomUserId();                                   // assigns anon ID once

  const pathIsExempt = useCallback(
    (p: string): boolean => p.startsWith('/courts/') || EXEMPT_PATHS.has(p),
    [],
  );

  /* ---------- decide on every navigation ------------------------------ */
  useEffect(() => {
    async function decide(): Promise<void> {
      if (pathIsExempt(pathname)) {
        setIsLoading(false);
        return;
      }

      setIsLoading(true);

      try {
        const show = await shouldShowPaywall();

        setViewData({
          uniqueDays : JSON.parse(localStorage.getItem('fss_days') ?? '[]').length,
          gateDays   : Number(localStorage.getItem('fss_gate') ?? 3),
          showPaywall: show,
        });

        logEvent('visit_home', { pathname, showPaywall: show });
        
        // Enhanced visit tracking with better paywall context
        ConversionTracker.trackVisit(pathname, show);

        // Don't auto-redirect to signup - let them see the paywall first
        // if (show) {
        //   router.replace('/signup');
        //   return;
        // }
      } catch {
        router.replace('/signup');
        return;
      } finally {
        setIsLoading(false);
      }
    }

    decide().catch(() => router.replace('/signup'));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pathname]);

  /* ---------- guards --------------------------------------------------- */
  if (pathIsExempt(pathname)) return null;
  if (isLoading)              return <LoadingIndicator />;
  
  // Check for first-time visitor BEFORE paywall logic
  if (isFirstTimeVisitor())   return <LandingPage />;
  if (viewData?.showPaywall)  return <Paywall />;

  /* ---------- main public UI ------------------------------------------ */
  if (viewData && pathname === '/') {
    return (
      <div className="container mx-auto max-w-4xl bg-white px-4 pt-8 pb-6 text-black md:pt-10 md:pb-8">
        <header className="mb-8 flex flex-col items-center gap-6 md:flex-row md:justify-between">
          <div className="flex items-center gap-6">
            <Image
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
              alt="First Serve Seattle Logo"
              width={80}
              height={80}
              priority
            />
            <div>
              <h1 className="mb-1 text-3xl font-extrabold text-[#0c372b] md:text-4xl">
                First Serve Seattle
              </h1>
              <p className="text-base font-semibold md:text-lg">
                Today&apos;s Open Tennis and Pickleball Courts
              </p>
            </div>
          </div>
          {/* Admin link - only show if user has admin session */}
          {typeof window !== 'undefined' && localStorage.getItem('admin_auth') === 'true' && (
            <div className="flex items-center">
              <a 
                href="/admin" 
                className="text-xs text-gray-500 hover:text-gray-700 px-2 py-1 rounded border border-gray-300 hover:border-gray-400 transition-colors"
                title="Admin Dashboard"
              >
                Admin
              </a>
            </div>
          )}
        </header>

        <DaysCounter
          uniqueDays={viewData.uniqueDays}
          gateDays={viewData.gateDays}
        />

        <Suspense fallback={<LoadingIndicator />}>
          <TennisCourtList />
        </Suspense>
      </div>
    );
  }

  /* ---------- unreachable ---------------------------------------------- */
  return null;
}
</file>

<file path="src/app/signup/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
// import { usePostHog } from "posthog-js/react";
import Link from "next/link";
import Image from "next/image";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

import { PlanSelector } from "@/components/PlanSelector";
import { FEATURES } from "@/lib/paywallCopy";
import SocialAuthButtons from "@/components/SocialAuthButtons";

import { Eye, EyeOff, CheckCircle2, XCircle } from "lucide-react";

type PlanType = "monthly" | "annual";

interface PasswordRequirement {
  id: string;
  regex: RegExp;
  message: string;
}

const PASSWORD_REQUIREMENTS: PasswordRequirement[] = [
  { id: "length", regex: /.{6,}/, message: "At least 6 characters" },
  { id: "lowercase", regex: /[a-z]/, message: "At least one lowercase letter" },
  { id: "uppercase", regex: /[A-Z]/, message: "At least one uppercase letter" },
  { id: "digit", regex: /\d/, message: "At least one digit" },
];

export default function SignUpPage() {
  /* -------------------------------------------------------------------- */
  /*  URL params                                                          */
  /* -------------------------------------------------------------------- */
  const searchParams        = useSearchParams();
  const initialPlanParam    = searchParams.get("plan");
  const headlineGroupParam  = searchParams.get("headline_group"); // analytics only
  const prefilledEmail      = searchParams.get("email") || "";
  const isAppleUser         = searchParams.get("apple_user") === "true";
  void headlineGroupParam;

  /* -------------------------------------------------------------------- */
  /*  Local state                                                         */
  /* -------------------------------------------------------------------- */
  const [plan, setPlan]           = useState<PlanType>(
    initialPlanParam === "annual" ? "annual" : "monthly",
  );
  const [fullName, setFullName]   = useState("");
  const [email, setEmail]         = useState(prefilledEmail);
  const [password, setPassword]   = useState("");
  const [assignedOffer, setAssignedOffer] = useState<{ id: string; discount?: { percentage: number } } | null>(null);
  const [loading, setLoading]     = useState(false);
  const [errorMsg, setErrorMsg]   = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [currentUser, setCurrentUser] = useState<{ id: string; email?: string; user_metadata?: { full_name?: string } } | null>(null);

  const supabase = createClientComponentClient();
  // const posthog = usePostHog();

  /* -------------------------------------------------------------------- */
  /*  Check if user is already signed in (from Apple OAuth)              */
  /* -------------------------------------------------------------------- */
  useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    const appleUser = searchParams.get('apple_user');
    const emailParam = searchParams.get('email');
    
    if (appleUser || emailParam) {
      console.log('🍎 Apple user detected, checking auth state');
      
      // Get current user session
      supabase.auth.getSession().then(({ data: { session } }) => {
        if (session?.user) {
          console.log('✅ Apple user authenticated:', session.user.email);
          setCurrentUser(session.user);
          setEmail(session.user.email || emailParam || '');
          
          // Check if Apple user already has a subscription
          supabase
            .from('subscribers')
            .select('id, status')
            .eq('email', session.user.email)
            .maybeSingle()
            .then(({ data: subscriber }) => {
              if (subscriber) {
                console.log('✅ Apple user already has subscription, redirecting to members');
                window.location.href = '/members';
                return;
              }
              
              // For Apple users without subscription, skip the account creation form
              if (appleUser && session.user.email) {
                console.log('🔄 Auto-filling Apple user email and skipping form');
                setEmail(session.user.email);
              }
            });
        }
      });
    }
  }, [supabase.auth, supabase]);

  useEffect(() => {
    // Everyone gets the 50% off offer
    const offer = { 
      id: 'fifty_percent_off_first_month', 
      discount: { percentage: 50 }
    };
    setAssignedOffer(offer);
  }, []);

  /* -------------------------------------------------------------------- */
  /*  Check if email user is already a subscriber                        */
  /* -------------------------------------------------------------------- */
  const checkExistingSubscriber = async (emailToCheck: string) => {
    if (!emailToCheck || emailToCheck.length < 3) return;
    
    try {
      const { data: subscriber } = await supabase
        .from('subscribers')
        .select('id, status')
        .eq('email', emailToCheck)
        .maybeSingle();
        
      if (subscriber) {
        setErrorMsg(`This email already has an active subscription. Please sign in instead.`);
        return true;
      }
      return false;
    } catch (error) {
      console.error('Error checking subscriber:', error);
      return false;
    }
  };

  /* -------------------------------------------------------------------- */
  /*  Helpers                                                             */
  /* -------------------------------------------------------------------- */
  const allMet = () =>
    PASSWORD_REQUIREMENTS.every((req) => req.regex.test(password));

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newPassword = e.target.value;
    setPassword(newPassword);
  };

  /* -------------------------------------------------------------------- */
  /*  Plan change triggers immediate checkout redirect                    */
  /* -------------------------------------------------------------------- */
  async function handlePlanChange(newPlan: PlanType) {
    console.log(`📊 Plan changed to: ${newPlan}`);
    setPlan(newPlan);
  }

  /* -------------------------------------------------------------------- */
  /*  Submit → create Supabase user then Stripe session                   */
  /* -------------------------------------------------------------------- */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!plan) {
      alert("Please select a plan first");
      return;
    }

    // For Apple users who are already authenticated, skip account creation
    if (currentUser && currentUser.email) {
      console.log('🍎 Apple user proceeding directly to checkout');
      await proceedToCheckout();
      return;
    }

    // Regular email/password signup flow
    if (!email || !password) {
      alert("Please fill in all fields");
      return;
    }

    setErrorMsg("");

    // For regular users, validate password
    if (!allMet()) {
      setErrorMsg("Password does not meet all requirements.");
      return;
    }

    setLoading(true);
    try {
      // Check if email already has a subscription
      const isExistingSubscriber = await checkExistingSubscriber(email);
      if (isExistingSubscriber) {
        setLoading(false);
        return;
      }

      console.log(`📝 Creating account for ${email}`);
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: fullName,
          },
        },
      });

      if (error) {
        throw error;
      }

      if (data.user) {
        console.log("✅ Account created, proceeding to checkout");
        
        // Track successful signup
        // posthog.capture('user_signup_completed', {
        //   plan_type: plan,
        //   signup_method: 'email',
        //   has_existing_subscription: false,
        //   email_prefilled: !!prefilledEmail,
        //   is_apple_user: isAppleUser
        // });
        
        await proceedToCheckout();
      }
    } catch (err: unknown) {
      console.error("Signup error:", err);
      setErrorMsg(err instanceof Error ? err.message : "Failed to create account");
    } finally {
      setLoading(false);
    }
  };

  async function proceedToCheckout() {
    try {
      // Track checkout start
      // posthog.capture('checkout_initiated', {
      //   plan_type: plan,
      //   user_email: email,
      //   offer_id: 'fifty_percent_off_first_month',
      //   from_page: 'signup'
      // });
      
      // Everyone gets the 50% off offer
      const offerId = 'fifty_percent_off_first_month';
      console.log('🎯 Signup page - offer ID:', offerId);
      
      const response = await fetch('/api/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email,
          plan,
          offerId: offerId,
          headlineGroup: headlineGroupParam,
          userId: currentUser?.id,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const { url } = await response.json();
      console.log("🔀 Redirecting to Stripe checkout");
      window.location.href = url;

      // Redirecting to checkout
    } catch (err: unknown) {
      console.error("Checkout error:", err);
      setErrorMsg(err instanceof Error ? err.message : "Failed to create checkout session");
      setLoading(false);
    }
  }

  /* -------------------------------------------------------------------- */
  /*  Render                                                              */
  /* -------------------------------------------------------------------- */
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white px-4 py-12 sm:py-16">
      <div className="flex justify-center mb-8">
        <Image
          src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Untitled%20design-Gg0C0vPvYqsQxqpotsKmDJRrhnQzej.svg"
          alt="First Serve Seattle Logo"
          width={80}
          height={80}
          priority
        />
      </div>

      <div className="mx-auto max-w-lg">
        <div className="overflow-hidden rounded-xl bg-white shadow-xl ring-1 ring-gray-100">
          <div className="px-6 py-8 sm:px-10">
            {/* ---------------- Plan selector ---------------- */}
            <h2 className="text-center text-2xl font-bold text-gray-900 mb-2">
              Choose Your Plan
            </h2>
            <p className="text-center text-sm text-gray-600 mb-8">
              Select the plan that works best for you.
            </p>

            <div className="mb-10">
              <PlanSelector
                selectedPlan={plan}
                onPlanSelect={handlePlanChange}
                features={FEATURES}
                assignedOffer={assignedOffer}
              />
            </div>

            <hr className="my-8 border-gray-200" />

            {/* ---------------- Social Auth Options ---------------- */}
            {!isAppleUser && (
              <div className="mb-8">
                <h2 className="text-center text-xl font-bold text-gray-900 mb-6">
                  Create Your Account
                </h2>
                <SocialAuthButtons 
                  mode="signup" 
                  disabled={loading}
                />
              </div>
            )}

            {/* ---------------- Account form ---------------- */}
            {!isAppleUser && (
              <h2 className="text-center text-xl font-bold text-gray-900 mb-6">
                Create with email
              </h2>
            )}

            {isAppleUser && (
              <h2 className="text-center text-xl font-bold text-gray-900 mb-6">
                Complete Your Registration
              </h2>
            )}

            {errorMsg && (
              <div className="mb-6 rounded-lg border border-red-200 bg-red-50 px-4 py-3 text-sm text-red-700">
                {errorMsg}
                {errorMsg.includes('already has an active subscription') && (
                  <div className="mt-2">
                    <Link href="/login" className="font-medium text-red-600 hover:text-red-800 underline">
                      Go to Sign In →
                    </Link>
                  </div>
                )}
              </div>
            )}

            {/* Account Creation Form */}
            {currentUser ? (
              // Apple user is already authenticated
              <div className="rounded-lg border border-green-200 bg-green-50 p-4">
                <div className="flex items-center gap-2 text-sm">
                  <svg className="h-4 w-4 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                  <span className="font-medium text-green-800">Account Connected</span>
                </div>
                <p className="mt-1 text-sm text-green-700">
                  Signed in as <strong>{currentUser.email}</strong>
                </p>
                <p className="mt-1 text-xs text-green-600">
                  Select a plan below to complete your subscription.
                </p>
              </div>
            ) : (
              // Regular email/password form
              <form onSubmit={handleSubmit} className="space-y-4">
                {/* Full Name */}
                <div>
                  <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
                    Full Name
                  </label>
                  <input
                    type="text"
                    id="fullName"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
                    required
                  />
                </div>

                {/* Email */}
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
                    required
                  />
                </div>

                {/* Password with requirements */}
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                    Password
                  </label>
                  <div className="relative mt-1">
                    <input
                      type={showPassword ? "text" : "password"}
                      id="password"
                      value={password}
                      onChange={handlePasswordChange}
                      className="block w-full rounded-md border border-gray-300 px-3 py-2 pr-10 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
                      required
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 flex items-center pr-3"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4 text-gray-400" />
                      ) : (
                        <Eye className="h-4 w-4 text-gray-400" />
                      )}
                    </button>
                  </div>

                  {/* Password Requirements */}
                  <div className="mt-2 space-y-1">
                    {PASSWORD_REQUIREMENTS.map((req) => {
                      const isMet = req.regex.test(password);
                      return (
                        <div key={req.id} className="flex items-center space-x-2 text-xs">
                          {isMet ? (
                            <CheckCircle2 className="h-3 w-3 text-green-500" />
                          ) : (
                            <XCircle className="h-3 w-3 text-gray-300" />
                          )}
                          <span className={isMet ? "text-green-600" : "text-gray-500"}>
                            {req.message}
                          </span>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {errorMsg && (
                  <div className="rounded-md border border-red-200 bg-red-50 p-3">
                    <p className="text-sm text-red-600">{errorMsg}</p>
                  </div>
                )}
              </form>
            )}

            {/* Action Button */}
            <button
              onClick={currentUser ? proceedToCheckout : handleSubmit}
              disabled={loading || (!currentUser && (!plan || (!currentUser && (!fullName || !email || !allMet()))))}
              className="mt-6 w-full rounded-lg bg-blue-600 py-3 text-white font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            >
              {loading 
                ? "Processing..." 
                : currentUser 
                  ? `Start ${plan} Plan - ${plan === "monthly" ? "$9.99/month" : "$99.99/year"}`
                  : "Create Account"
              }
            </button>

            {/* Footer links */}
            <div className="mt-6 space-y-1 text-center text-sm text-gray-600">
              <p>
                Already have an account?{" "}
                <Link
                  href="/login"
                  className="font-medium text-blue-600 hover:underline"
                >
                  Sign In
                </Link>
              </p>
              <p>
                Need help?{" "}
                <a
                  href="mailto:support@firstserveseattle.com"
                  className="font-medium text-blue-600 hover:underline"
                >
                  Contact support
                </a>
              </p>
            </div>

            <p className="mt-6 text-center text-xs text-gray-500">
              By creating an account, you agree to our{" "}
              <Link
                href="/terms-of-service"
                className="underline hover:text-gray-700"
              >
                Terms of Service
              </Link>{" "}
              and{" "}
              <Link
                href="/privacy-policy"
                className="underline hover:text-gray-700"
              >
                Privacy Policy
              </Link>
              . Secure payment via Stripe.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

</files>
